{"version":3,"sources":["core/types.ts","core/classes/GameObject.ts","core/classes/LosingLengthSnake.ts","core/classes/Snake.ts","core/classes/Food.ts","core/classes/Game.ts","core/classes/PlayAgent.ts","core/classes/BaseAgent.ts","core/instance.ts","components/Cell.tsx","components/Table.tsx","components/AlignCenter.tsx","components/RainbowButton.tsx","components/Popup.tsx","components/Paper.tsx","components/MenuBar.tsx","components/Copyright.tsx","components/CheckBox.tsx","components/Game.tsx","index.tsx"],"names":["GameState","CellType","Direction","GameObject","defaultState","cells","reward","fruitEaten","done","localState","this","currentState","Error","forward","dryRun","reduceForward","reduceBackward","max","Math","floor","random","index","trunc","Date","now","y","x","filter","coordinate","type","LosingLengthSnake","stepsLeftToDecreaseLength","stepsForEachFood","gameCells","collision","collisionOthers","tastyFood","looseLength","disgustingPoison","usualStepForward","_snake","length","getNextCoord","slice","_reward","rewards","step","die","nextCell","food","_foodEaten","params","_name","_died","currentDirection","nextDirection","steps","tableSize","name","snake","direction","Right","poison","death","map","item","snakeHead","y1","x1","find","y0","x0","nextCoord","wall","isNextDirectionCorrect","abs","Left","Down","Up","nextDegree","Food","lastDinnerTime","point","Infinity","dinnerRefreshSeconds","secondsFromLastDinner","dinnerTime","randomCoordinate","foodEaten","moreFoooood","getTime","findCellsByCoord","secondsFromUnixEpoch","Game","size","opts","fullSize","snakes","_state","_cellsForView","reset","makeCellsForView","center","gameObjects","Array","reduce","tick","gameOver","array","state","methodName","accumulator","reducer","fill","empty","makeEmptyCellsForView","cellTypeIndex","value","Object","keys","indexOf","toString","cellsSorted","sort","a","b","coordinateToIndex","l","indexToCoordinate","died","score","stepsLeft","PlayAgent","url","modelUrl","sideSize","_ready","tf","model","warm","actions","topMostValue","predict","gameStatesToTensor","argMax","dataSync","directionByIndex","states","buffer","forEach","i","set","toTensor","game","agent","CellCssGrid","cellType","className","memo","whyDidYouRender","withStyles","container","width","height","border","borderRadius","display","gridColumnGap","gridRowGap","classes","style","gridTemplateColumns","sqrt","gridTemplateRows","Cell","key","wrapper","justifyContent","alignItems","margin","wrappedMobile","children","isMobile","classNames","styles","btn","minWidth","padding","fontWeight","fontSize","backgroundColor","borderImage","borderImageSlice","backgroundClip","cursor","green","greenButtonText","background","WebkitBackgroundClip","WebkitTextFillColor","orange","orangeButtonText","blue","blueButtonText","color","onClick","_onClick","useCallback","containerClasses","textClasses","top","left","article","marginTop","text","title","marginBottom","description","start","_start","_reset","AlignCenter","ready","pause","paper","content","font","menu","zoom","_pause","xmlns","viewBox","d","bottom","link","textShadow","textDecoration","href","rel","target","input","label","checked","onChange","defaultChecked","event","Boolean","htmlFor","useState","setState","setCells","setScore","setStepsLeft","autoPlay","setAutoPlay","callback","dir","code","running","useEffect","loadModel","useEventListener","handlers","useSwipeable","onSwiped","preventDefaultTouchmoveEvent","trackMouse","tmp","setInterval","clearTimeout","autoPlayCallback","Table","render","document","getElementById"],"mappings":"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","file":"static/js/main.bc5930bf.chunk.js","sourcesContent":["export enum GameState {\n    ready = 0,\n    running = 1,\n    pause = 2,\n    gameOver = 3,\n};\n\nexport enum CellType {\n    empty = 0,\n    wall,\n    food,\n    snake,\n    snakeHead,\n    poison,\n};\n\nexport type TCoordinate = [number, number]; // y, x\nexport type TCoordinates = Array<TCoordinate>;\n\nexport enum Direction {\n    Right = 0,\n    Down = 90,\n    Left = 180,\n    Up = 270,\n};\n\nexport type TDirection = Direction.Right | Direction.Down | Direction.Left | Direction.Up;\n\nexport type TGameState = {\n    cells: TCells,\n    reward: number,\n    fruitEaten: number,\n    done: boolean,\n};\n\nexport type TCell = {\n    coordinate: TCoordinate,\n    type: CellType,\n};\n\nexport type TCells = Array<TCell>;\nexport type TCellTypes = Array<CellType>;\n\nexport type TOptimizedState = [TGameState, Direction, number, boolean, TCells];\n","import { TGameState, TCoordinate, TCells } from '../types';\n\nexport abstract class GameObject {\n  protected defaultState: TGameState = {\n    cells: [],\n    reward: 0,\n    fruitEaten: 0,\n    done: false,\n  };\n  protected localState: TGameState = this.defaultState;\n\n  protected reduceForward(currentState: TGameState): TGameState {\n    throw new Error('Must be implemented!');\n  }\n\n  protected reduceBackward(currentState: TGameState): TGameState {\n    return currentState;\n  }\n\n  public reducer(\n    currentState: TGameState = this.defaultState,\n    forward: boolean = true, \n    dryRun: boolean = false,\n  ): TGameState {\n    if (!dryRun && forward) {\n      this.localState = this.reduceForward(currentState);\n    }\n\n    if (!dryRun && !forward) {\n      return this.reduceBackward(currentState);\n    }\n\n    return {\n      ...currentState,\n      ...this.localState,\n      cells: [\n        ...currentState.cells,\n        ...this.localState.cells,\n      ],\n    };\n  }\n\n  protected random(max: number) {\n    return Math.floor((Math.random() * max));\n  }\n\n  protected indexToCoordinate(index: number, max: number): TCoordinate {\n    return [Math.trunc(index / max), Math.trunc(index % max)];\n  }\n\n  protected secondsFromUnixEpoch() {\n    return Date.now() / 1000;\n  }\n\n  protected randomCoordinate(max: number): TCoordinate {\n    return [this.random(max), this.random(max)];\n  }\n\n  protected findCellsByCoord(cells: TCells, [y, x]: TCoordinate): TCells {\n    return cells.filter(({ coordinate, type }) => coordinate[0] === y && coordinate[1] === x);\n  }\n}","import { CellType, TCells } from '../types';\nimport { Snake } from './Snake';\n\nexport class LosingLengthSnake extends Snake {\n    protected stepsLeftToDecreaseLength: number = 10;\n    protected stepsForEachFood: number = 10;\n    \n    get stepsLeft(): number {\n        return ((this._snake.length - 1) * this.stepsForEachFood) + this.stepsLeftToDecreaseLength;\n    }\n\n    protected step(gameCells: TCells): void {\n        if (this.collision(gameCells)) { // collision with tail check\n            return;\n        }\n\n        if (this.collisionOthers(gameCells)) { // collision in another cells check\n            return;\n        }\n\n        if (this.tastyFood(gameCells)) { // find food\n            return;\n        }\n\n        if (this.looseLength(gameCells)) { // seems no steps left to move forward, decreasing length\n            return;\n        }\n\n        if (this.disgustingPoison(gameCells)) {\n            return;\n        }\n\n        if (this.usualStepForward(gameCells)) {\n            return;\n        }\n    }\n\n    protected looseLength(gameCells: TCells): boolean {\n        this.stepsLeftToDecreaseLength--;\n        if (this.stepsLeftToDecreaseLength === 0) {\n            if (this._snake.length >= 2) {\n                this.stepsLeftToDecreaseLength = this.stepsForEachFood;\n                this._snake = [this.getNextCoord(), ...this._snake.slice(0, this._snake.length - 2)];\n                this._reward = this.rewards.step;\n                return true;\n            }\n            this.die();\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Detect food in next cell\n     * If food found we have to return next coord for snake's head plus current snake\n     * \n     * Extended logic is: add extra steps on new cell with food\n     * \n     * @returns Return true if we need to stop step managing\n     */\n    protected tastyFood(gameCells: TCells): boolean {\n        if (this.nextCell(gameCells)?.type === CellType.food) {\n            this.stepsLeftToDecreaseLength = this.stepsForEachFood;\n            this._snake = [this.getNextCoord(), ...this._snake];\n\n            this._foodEaten = 1;\n            this._reward = this.rewards.food;\n\n            return true;\n        }\n\n        return false;\n    }\n};","import { GameObject } from './GameObject';\nimport {\n    TGameState,\n    TCoordinate,\n    TCoordinates,\n    Direction,\n    TDirection,\n    CellType,\n    TCells,\n    TCell,\n} from '../types';\n\nexport type TSnakeRewards = {\n    step: number,\n    food: number,\n    poison: number,\n    death: number,\n};\n\nexport type TSnakeConstructorParams = {\n    snake: TCoordinates;\n    name?: string;\n    direction?: TDirection;\n    tableSize?: number;\n    rewards?: {\n        step?: number,\n        food?: number,\n        poison?: number,\n        death?: number,\n    },\n};\n\nexport class Snake extends GameObject {\n    protected _name: string;\n    protected _died: boolean = false;\n    protected _snake: TCoordinates;\n    protected currentDirection: TDirection;\n    protected nextDirection: TDirection;\n    protected steps: number = -1;\n    protected tableSize: number;\n    protected _foodEaten: number = 0;\n    protected _reward: number = 0;\n    protected rewards: TSnakeRewards;\n\n    constructor(params: TSnakeConstructorParams) {\n        super();\n        this._name = params.name || 'My hero snake';\n        this._snake = params.snake;\n        this.currentDirection = params.direction || Direction.Right;\n        this.nextDirection = this.currentDirection;\n        this.tableSize = params.tableSize || 100;\n        this.rewards = {\n            step: params.rewards?.step || -0.2,\n            food: params.rewards?.food || 10,\n            poison: params.rewards?.poison || -2,\n            death: params.rewards?.death || -10,\n        };\n    }\n\n    public set direction(nextDegree: TDirection) {\n        this.nextDirection = nextDegree;\n    }\n\n    public get name(): string {\n        return this._name;\n    }\n\n    public get length(): number {\n        return this._snake.length;\n    }\n\n    public get points(): TCoordinates {\n        return this._snake.slice();\n    }\n\n    public get reward(): number {\n        return this._reward;\n    }\n\n    public get foodEaten(): number {\n        return this._foodEaten;\n    }\n\n    get died(): boolean {\n        return this._died;\n    }\n\n    get score(): number {\n        return this.steps > 0 ? this.steps : 0;\n    }\n\n    protected die() {\n        this._died = true;\n        this._reward = this.rewards.death;\n    }\n\n    protected reduceForward(currentState: TGameState, dryRun: boolean = false): TGameState {\n        if (!dryRun) {\n            if (!this._died) {\n                if (this.steps >= 0) {\n                    this.step(currentState.cells);\n                }\n                this.steps++;\n            }\n        }\n\n        return {\n            ...currentState,\n            cells: this._snake.map((item, index) => ({\n                coordinate: item,\n                type: index === 0 ? CellType.snakeHead : CellType.snake,\n            })),\n        };\n    }\n\n    protected step(gameCells: TCells): void {\n        this._foodEaten = 0;\n        this._reward = 0;\n\n        if (this.collision(gameCells)) { // check collision with tail\n            return;\n        }\n\n        if (this.collisionOthers(gameCells)) { // check collision in another cells\n            return;\n        }\n\n        if (this.tastyFood(gameCells)) { // find food\n            return;\n        }\n\n        if (this.disgustingPoison(gameCells)) {\n            return;\n        }\n\n        if (this.usualStepForward(gameCells)) { // just move to next cell\n            return;\n        }\n    }\n\n    /**\n     * Return possible cell if it already exists in array based on your snake movement way\n     * \n     * In this cell can be: food, another snake or another type of cell\n     * In this cell can't be current snake tail\n     */\n    protected nextCell(gameCells: TCells): TCell | undefined {\n        const [y1, x1] = this.getNextCoord();\n        return gameCells.find(({ coordinate: [y0, x0] }) => y0 === y1 && x0 === x1);\n    }\n\n    /**\n     * Handle here collision with your tail\n     */\n    protected collision(gameCells: TCells): boolean {\n        const nextCoord = this.getNextCoord();\n\n        if (this._snake.find(([y, x]) => nextCoord[0] === y && nextCoord[1] === x)) {\n            this.die();\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Handle here usual step forward minus one tail block\n     */\n    protected usualStepForward(gameCells: TCells): boolean {\n        this._snake = [this.getNextCoord(), ...this._snake.slice(0, this._snake.length - 1)];\n        this._reward = this.rewards.step;\n        return true;\n    }\n\n    /**\n     * Detect food in next cell\n     * If food found we have to:\n     *  set flag \"food eaten\"\n     *  set reward\n     *  return next coord for snake's head plus current snake\n     * \n     * @returns Return true if we need to stop step managing\n     */\n    protected tastyFood(gameCells: TCells): boolean {\n        if (this.nextCell(gameCells)?.type === CellType.food) {\n            this._snake = [this.getNextCoord(), ...this._snake];\n\n            this._foodEaten = 1;\n            this._reward = this.rewards.food;\n\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Detect poison in next cell\n     * If poison found we have to:\n     *  set reward\n     * \n     * @returns Return true if we need to stop step managing\n     */\n    protected disgustingPoison(gameCells: TCells): boolean {\n        if (this.nextCell(gameCells)?.type === CellType.poison) {\n            this._snake = [this.getNextCoord(), ...this._snake.slice(0, this._snake.length - 1)];\n            this._reward = this.rewards.poison;\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Handle here collision with another objects in cells\n     */\n    protected collisionOthers(gameCells: TCells): boolean {\n        const nextCell = this.nextCell(gameCells);\n        \n        if (nextCell?.type === CellType.snake || nextCell?.type === CellType.snakeHead || nextCell?.type === CellType.wall) {\n            this.die();\n            return true;\n        }\n        return false;\n    }\n\n    protected getNextCoord(): TCoordinate {\n        const [y, x] = this._snake.slice(0)[0];\n        const isNextDirectionCorrect = Math.abs(this.currentDirection - this.nextDirection) !== 180;\n        if (isNextDirectionCorrect) {\n            this.currentDirection = this.nextDirection;\n        }\n    \n        switch (isNextDirectionCorrect ? this.nextDirection : this.currentDirection) {\n            case Direction.Left:\n                return [y, x === 0 ? this.tableSize - 1 : x - 1];\n            case Direction.Right:\n                return [y, x + 1 === this.tableSize ? 0 : x + 1];\n            case Direction.Down:\n                return [y + 1 === this.tableSize ? 0 : y + 1, x];\n            case Direction.Up:\n                return [y === 0 ? this.tableSize - 1 : y - 1, x];\n        };\n        throw new Error(`I have no idea how to move this angle o_O: ${this.nextDirection}`)\n    }\n};","import { TGameState, CellType, TCoordinate } from '../types';\nimport { GameObject } from './GameObject';\n\nexport class Food extends GameObject {\n  public tableSize: number;\n  protected lastDinnerTime: number;\n  protected dinnerRefreshSeconds: number = 7;\n  protected point: TCoordinate;\n\n  constructor(tableSize: number, lastDinnerTime: number = 0, point: TCoordinate = [Infinity, Infinity]) {\n    super();\n    this.tableSize = tableSize;\n    this.lastDinnerTime = lastDinnerTime;\n    this.point = point;\n  }\n\n  protected reduceForward(currentState: TGameState): TGameState {\n    if (this.secondsFromLastDinner() > this.dinnerRefreshSeconds) {\n      this.dinnerTime();\n      this.point = this.randomCoordinate(this.tableSize);\n      return this.localState = {\n        ...currentState,\n        cells: [{\n          coordinate: this.point,\n          type: CellType.food,\n        }],\n      };\n    }\n  \n    return this.localState;\n  }\n\n  protected reduceBackward(currentState: TGameState): TGameState {\n    if (!this.localState.cells[0]){\n      return currentState;\n    }\n\n    if (this.foodEaten(currentState)) {\n        this.moreFoooood()\n    }\n    return currentState;\n  }\n\n  protected dinnerTime() {\n    this.lastDinnerTime = new Date().getTime() / 1000;\n  }\n\n  protected foodEaten(currentState: TGameState) {\n    return this.findCellsByCoord(currentState.cells, this.localState.cells[0].coordinate).length === 2;\n  }\n\n  protected secondsFromLastDinner() {\n    return this.secondsFromUnixEpoch() - this.lastDinnerTime;\n  }\n\n  get dinnerEachSeconds(): number {\n    return this.dinnerRefreshSeconds;\n  }\n\n  protected moreFoooood() {\n    this.lastDinnerTime = 0;\n  }\n\n  get points(): TCoordinate {\n    return this.point;\n  }\n}","import { LosingLengthSnake } from './LosingLengthSnake';\nimport { Food } from './Food';\nimport { GameObject } from './GameObject';\nimport {\n    TCellTypes,\n    TCell,\n    TGameState,\n    TDirection,\n    CellType,\n    TCoordinate,\n} from '../types';\n\ninterface IGame {\n    reset(): void;\n    tick(): TCellTypes;\n    cells: TCellTypes;\n    state: TGameState;\n    score: number;\n    direction: number;\n    gameOver: boolean;\n};\n\nexport type TGameConstructorParams = {\n    snakes?: Array<LosingLengthSnake>;\n    food?: Array<Food>;\n};\n\nexport const defaultState = {\n    cells: [],\n    reward: 0,\n    fruitEaten: 0,\n    done: false,\n};\n\nexport class Game implements IGame {\n    protected size: number;\n    protected fullSize: number;\n    protected snakes: Array<LosingLengthSnake> = [];\n    protected food: Array<Food> = [];\n    protected _state: TGameState = defaultState;\n    protected _cellsForView: TCellTypes = [];\n    protected opts: TGameConstructorParams;\n\n    constructor(size: number = 10, opts?: TGameConstructorParams) {\n        this.opts = opts || {};\n        this.size = size;\n        this.fullSize = size * size;\n        this.reset();\n        this._cellsForView = this.makeCellsForView();\n    }\n\n    public reset(): void {\n        const center = [Math.trunc(this.size / 2), Math.trunc(this.size / 2)];\n\n        this.snakes = this.opts.snakes ? this.opts.snakes : [new LosingLengthSnake({\n            name: 'My smart snake',\n            snake: [\n                [center[0], 2],\n                [center[0], 1],\n                [center[0], 0],\n            ],\n            tableSize: this.size,\n        })];\n\n        this.food = this.opts.food ? this.opts.food : [\n            new Food(this.size),\n        ];\n    }\n\n    public tick(): TCellTypes {\n        const gameObjects = Array<GameObject>(...this.food, ...this.snakes);\n        this._state = this.reduce(gameObjects, this.reduce(gameObjects, defaultState), false);\n        this._cellsForView = this.makeCellsForView();\n        return this._cellsForView;\n    }\n\n    public step(direction: TDirection): TGameState {\n        this.direction = direction;\n        this.tick();\n        return {\n            cells: this._state.cells,\n            reward: this.snakes[0].reward || 0,\n            fruitEaten: this.snakes[0].foodEaten || 0,\n            done: this.gameOver,\n        };\n    }\n\n    public reduce(array: Array<GameObject>, state: TGameState, forward: boolean = true): TGameState {\n        const methodName = forward ? 'reduce' : 'reduceRight';\n        return array[methodName]((accumulator: TGameState, item: GameObject) => item.reducer(accumulator, forward), state);\n    }\n\n    protected makeEmptyCellsForView(): TCellTypes {\n        return this._cellsForView = Array<CellType>(this.fullSize).fill(CellType.empty);\n    }\n\n    protected indexToCoordinate(index: number, max: number): TCoordinate {\n        return [Math.trunc(index / max), Math.trunc(index % max)];\n    }\n\n    protected coordinateToIndex([y, x]: TCoordinate): number {\n        return y * this.size + x;\n    }\n\n    protected makeCellsForView(): TCellTypes {\n        if (this._cellsForView.length === 0) {\n            return this._cellsForView = this.makeEmptyCellsForView();\n        }\n\n        const cellTypeIndex = (value: CellType) => Object.keys(CellType).indexOf(value.toString());\n\n        const cellsSorted = this._state.cells.sort((a: TCell, b: TCell) => {\n            if (this.coordinateToIndex(a.coordinate) < this.coordinateToIndex(b.coordinate)) {\n                return 1;\n            }\n\n            if (this.coordinateToIndex(a.coordinate) > this.coordinateToIndex(b.coordinate)) {\n                return -1;\n            }\n\n            if (this.coordinateToIndex(a.coordinate) === this.coordinateToIndex(b.coordinate)) {\n                if (cellTypeIndex(a.type) < cellTypeIndex(b.type)) {\n                    return 1;\n                }\n\n                if (cellTypeIndex(a.type) > cellTypeIndex(b.type)) {\n                    return -1;\n                }\n                return 0;\n            }\n\n            throw new Error('Imposible');\n        });\n\n        return this._cellsForView = this.makeEmptyCellsForView().map((l, index) => {\n            const [y1, x1] = this.indexToCoordinate(index, this.size);\n            return cellsSorted.find(({ coordinate: [y, x] }: TCell) => x === x1 && y === y1)?.type || CellType.empty;\n        });\n    }\n\n    public get cells(): TCellTypes {\n        return this._cellsForView;\n    }\n\n    public set direction(direction: TDirection) {\n        this.snakes[0].direction = direction;\n    }\n\n    public get gameOver(): boolean {\n        return this.snakes.length === 0 || this.snakes.filter(({ died }) => died).length === this.snakes.length;\n    }\n\n    public get score(): number {\n        return this.snakes[0].score;\n    }\n\n    public get stepsLeft(): number {\n        return this.snakes[0].stepsLeft;\n    }\n\n    public get state(): TGameState {\n        return this._state;\n    }\n\n    public get getState(): TGameState {\n        return {\n            cells: this._state.cells,\n            reward: this.snakes[0].reward || 0,\n            fruitEaten: this.snakes[0].foodEaten || 0,\n            done: this.gameOver,\n        };\n    }\n};","import * as tf from '@tensorflow/tfjs';\nimport { TDirection, TGameState } from '../types';\nimport { BaseAgent } from './BaseAgent';\n\nexport class PlayAgent extends BaseAgent {\n    public modelUrl: string;\n    public sideSize: number;\n    private _ready: boolean = false;\n\n    constructor(size: number, url: string) {\n        super(size);\n        this.sideSize = size;\n        this.modelUrl = url;\n    }\n\n    public async loadModel(): Promise<undefined> {\n        this.model = await tf.loadLayersModel(this.modelUrl);\n        this._ready = true;\n        this.warm();\n        return;\n    }\n\n    public get ready(): boolean {\n        return this._ready;\n    }\n\n    public predict(state: TGameState): TDirection {\n        if (!this._ready) {\n            throw new Error('Agent is not ready to predict yet');\n        }\n\n        return super.predict(state);\n    };\n};\n","import * as tf from '@tensorflow/tfjs';\nimport { defaultState } from './Game';\nimport { TGameState, CellType, TDirection, Direction } from '../types';\n\ninterface IBaseAgent {\n    predict (state: TGameState): TDirection;\n    gameStatesToTensor(state: Array<TGameState>): tf.Tensor;\n};\n\nexport class BaseAgent implements IBaseAgent {\n    public sideSize: number;\n    protected model: tf.LayersModel;\n    protected actions: Array<Direction> = [Direction.Right, Direction.Down, Direction.Left, Direction.Up];\n\n    constructor(size: number) {\n        this.sideSize = size;\n        this.model = new tf.Sequential();\n    }\n\n    public predict(state: TGameState): TDirection {\n        const prediction = tf.tidy(() => this.model.predict(this.gameStatesToTensor([state]))) as tf.Tensor;\n        const topMostValue = prediction.argMax(-1).dataSync()[0];\n        return this.directionByIndex(topMostValue);\n    };\n\n    protected async warm() {\n        this.predict(defaultState);\n    }\n\n    public gameStatesToTensor(states: Array<TGameState> = []): tf.Tensor {\n        const buffer = tf.buffer([states.length, this.sideSize, this.sideSize, 2]);\n\n        states.forEach((state, i) => {\n          state.cells.forEach(({ coordinate, type }) => buffer.set(\n              type === CellType.snake || type === CellType.snakeHead ? type - 2 : type - 1,\n              i,\n              coordinate[0],\n              coordinate[1],\n              type === CellType.snake || type === CellType.snakeHead ? 0 : 1,\n          ));\n        });\n        return buffer.toTensor();\n    }\n\n    protected directionByIndex(value: TDirection) {\n        return this.actions[value];\n    }\n};\n","import { Game } from './classes/Game';\nimport { PlayAgent } from './classes/PlayAgent';\n\nconst size = 5;\n\nexport const game = new Game(size);\nexport const agent = new PlayAgent(size, '/snake-mini-game-web/model/model.json');\n","import React, { FC, memo } from 'react';\n\nimport { CellType } from '../core/types';\n\ninterface IProps {\n  cellType: CellType,\n}\n\nconst CellCssGrid: FC<IProps> = ({ cellType }) => <div className={`cell-type-${cellType.toString()}`}></div>;\n\nexport default memo(CellCssGrid);\n\n// @ts-ignore\nCellCssGrid.whyDidYouRender = true\n","import React, { FC, memo } from 'react';\nimport withStyles, { WithStylesProps } from 'react-jss'\n\nimport { TCellTypes, CellType } from '../core/types';\nimport CellCssGrid from './Cell';\n\nconst styles = {\n  container: {\n    width: '100%',\n    height: '100%',\n    border: '2px dashed #F7EEEE',\n    borderRadius: 5,\n    display: 'grid',\n    gridColumnGap: 0,\n    gridRowGap: 0,\n  }\n};\n\ninterface IProps extends WithStylesProps<typeof styles> {\n  cells: TCellTypes,\n}\n\nconst TableCssGrid: FC<IProps> = ({ classes, cells }) => {\n  const result = (\n    <div\n      className={`table-css-grid-container ${classes.container}`}\n      style={{\n        gridTemplateColumns: `repeat(${Math.sqrt(cells.length)}, 1fr)`,\n        gridTemplateRows: `repeat(${Math.sqrt(cells.length)}, 1fr)`,\n      }}\n    >\n      {cells.map((cellType: CellType, index: number) => (<CellCssGrid key={index} cellType={cellType} />))}\n    </div>\n  );\n  return result;\n}\n\nexport default memo(withStyles(styles)(TableCssGrid));\n\n// @ts-ignore\n// TableCssGrid.whyDidYouRender = true;\n","import React, { FC } from 'react';\nimport withStyles, { WithStylesProps } from 'react-jss'\nimport classNames from \"classnames\";\n\nconst styles = {\n  wrapper: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100vw',\n    height: '100vh',\n    margin: 'auto',\n  },\n  wrappedMobile: {\n    display: 'inherit',\n  },\n  container: {\n    margin: '0 auto',\n  },\n};\n\ninterface IProps extends WithStylesProps<typeof styles> {\n  children: React.ReactNode,\n  isMobile?: boolean,\n}\n\nconst FlexAlignCenter: FC<IProps> = ({ classes, children, isMobile }) =>\n  <div className={classNames(\n    classes.wrapper, \n    {[classes.wrappedMobile]: isMobile}, \n  )}>\n    <div className={classes.container}>{children}</div>\n  </div>;\n\nexport default withStyles(styles)(FlexAlignCenter);\n","import React, { FC, useCallback } from 'react';\nimport withStyles, { WithStylesProps } from 'react-jss'\n\nexport type TRainbowButtonColor = 'green' | 'orange' | 'blue';\nexport type TRainbowButtonTextColor = 'greenButtonText' | 'orangeButtonText' | 'blueButtonText';\n\nconst styles = {\n  btn: {\n    display: 'inline-block',\n    minWidth: 270,\n    margin: '0.4em',\n    padding: '0.7em 3em',\n    fontWeight: 400,\n    fontSize: 30,\n    backgroundColor: 'transparent',\n    border: '4px solid transparent',\n    borderImage: 'linear-gradient(to right, #add356 0%, #00dfa6 100%)',\n    borderImageSlice: 1,\n    backgroundClip: 'border-box',\n    cursor: 'pointer',\n    ['textAlign' as any]: 'center',\n  },\n  green: {\n    borderImageSlice: 1,\n    borderImage: 'linear-gradient(to right, #add356 0%, #00dfa6 100%)',\n  },\n  greenButtonText: {\n    background: '-webkit-linear-gradient(left, #add356, #00dfa6)',\n    WebkitBackgroundClip: 'text',\n    WebkitTextFillColor: 'transparent',\n    },\n  orange: {\n    borderImageSlice: 1,\n    borderImage: 'linear-gradient(to right, #ffcb52 0%, #ff451f 100%)',\n  },\n  orangeButtonText: {\n    background: '-webkit-linear-gradient(left, #ffcb52, #ff451f)',\n    WebkitBackgroundClip: 'text',\n    WebkitTextFillColor: 'transparent',\n  },\n  blue: {\n    borderImageSlice: 1,\n    borderImage: 'linear-gradient(to right, #3dade9 0%, #bf2fcb 100%)',\n  },\n  blueButtonText: {\n    background: '-webkit-linear-gradient(left, #3dade9, #bf2fcb)',\n    WebkitBackgroundClip: 'text',\n    WebkitTextFillColor: 'transparent',\n  },\n};\n\ninterface IProps extends WithStylesProps<typeof styles> {\n  color: TRainbowButtonColor,\n  onClick: Function,\n}\n\nconst RainbowButton: FC<IProps> = ({ children, classes, color, onClick }) => {\n  const _onClick = useCallback(() => onClick(), [onClick]);\n  const containerClasses = `${classes.btn} ${classes[color]}`;\n  const textClasses = classes[`${color}ButtonText` as TRainbowButtonTextColor];\n\n  return <button className={containerClasses} onClick={_onClick}><p className={textClasses}>{children}</p></button>;\n}\nexport default withStyles(styles)(RainbowButton);\n","import React, { FC, useCallback } from 'react';\nimport withStyles, { WithStylesProps } from 'react-jss'\n\nimport { GameState } from '../core/types';\nimport AlignCenter from './AlignCenter';\nimport RainbowButton from './RainbowButton';\n\nconst styles = {\n  container: {\n    height: '100%',\n    top: 0,\n    left: 0,\n    fontSize: 'xx-large',\n    backgroundColor: 'rgba(0, 0, 0, 0.6)',\n    width: '100%',\n    cursor: 'default',\n    ['textAlign' as any]: 'center',\n    ['position' as any]: 'fixed',\n  },\n  article: {\n    marginTop: '1em',\n  },\n  text: {\n    top: '47%',\n    color: 'white',\n    ['position' as any]: 'relative',\n    ['textAlign' as any]: 'center',\n  },\n  title: {\n    fontSize: 70,\n    marginBottom: '0.2em',\n  },\n  score: {\n    fontSize: 40,\n  },\n  description: {\n    marginTop: '1.5em',\n    fontSize: 25,\n  },\n};\n\ninterface IProps extends WithStylesProps<typeof styles> {\n  score: number,\n  state: GameState,\n  start: Function,\n  reset: Function,\n}\n\nconst Popup: FC<IProps> = ({ classes, score, state, start, reset }) => {\n  const _start = useCallback(() => start(), [start]);\n  const _reset = useCallback(() => reset(), [reset]);\n\n  return (\n    <div className={classes.container}>\n      <AlignCenter>\n        <div className={`${classes.text} ${classes.title}`}>\n          { state === GameState.ready ? 'Hi there!' : null}\n          { state === GameState.pause ? 'Pause' : null}\n          { state === GameState.gameOver ? 'You lose' : null}\n        </div>\n        { state === GameState.pause || state === GameState.gameOver\n          ? (<div className={`${classes.text} ${classes.score}`}>Score: {score}</div>)\n          : null\n        }\n\n          <article className={classes.article}>\n            { state === GameState.ready || state === GameState.pause\n              ? (\n                <RainbowButton onClick={_start} color=\"green\">\n                  {state === GameState.ready ? 'Start' : 'Continue'}\n                </RainbowButton>\n              )\n              : null\n            }\n\n            { state === GameState.gameOver || state === GameState.pause\n              ? (\n                <RainbowButton onClick={_reset} color={state === GameState.pause ? 'blue' : 'orange'}>\n                  {state === GameState.pause ? 'New Game' : 'Try again'}\n                </RainbowButton>\n              )\n              : null}\n          </article>\n\n        <div className={`${classes.text} ${classes.description}`}>\n          { state === GameState.ready ? ' Press the button or \"space\" to start' : null}\n          { state === GameState.pause ? ' Press \"space\" to continue or \"R\" to restart' : null}\n          { state === GameState.gameOver ? ' Press the button or \"space\" to restart' : null}\n        </div>\n      </AlignCenter>\n    </div>\n  );\n}\n\nexport default withStyles(styles)(Popup);\n","import React, { FC } from 'react';\nimport withStyles, { WithStylesProps } from 'react-jss'\n\nconst padding = 30;\nconst size = 75;\n\nconst getColor = () => {\n  const colors = [\n    '#fd9170',\n    '#ef857c',\n    '#e8e277',\n    '#9ee0a1',\n    '#90d8af',\n    '#9ED9EB',\n    '#9EB3EB',\n    '#C49EEB',\n    '#DB9EEB',\n  ];\n  return colors[0];\n  // return colors[Math.floor((Math.random() * colors.length))]\n};\n  \nconst styles = {\n  paper: {\n    '@media (orientation: landscape)': {\n      width: size+'vh',\n      height: size+'vh',\n    },\n    '@media (orientation: portrait)': {\n      width: size+'vw',\n      height: size+'vw',\n    },\n    '@media only screen and (max-device-width: 720px)': {\n      width: '100vw',\n      height: '100vw',\n    },\n    backgroundColor: getColor(),\n    borderRadius: 12,\n    ['position' as any]: 'relative',\n    ['boxShadow' as any]: '0 1px 4px rgba(0, 0, 0, 0.3), 0 0 20px rgba(0, 0, 0, 0.1) inset',\n    '&::before': {\n      ['position' as any]: 'absolute',\n      content: 'open-quote',\n      top: 100,\n      bottom: 5,\n      left: 30,\n      right: 30,\n      zIndex: -1,\n      boxShadow: '0 0 40px 13px #848484;',\n      borderRadius: '100px/20px',\n    },\n    '&::after': {\n      ['position' as any]: 'absolute',\n      content: 'open-quote',\n      top: 100,\n      bottom: 5,\n      left: 30,\n      right: 30,\n      zIndex: -1,\n      boxShadow: '0 0 40px 13px #848484;',\n      borderRadius: '100px/20px',\n    }\n  },\n  content: {\n    height: `calc(100% - 4px - ${padding}px - ${padding}px)`,\n    width: `calc(100% - 4px - ${padding}px - ${padding}px)`,\n    margin: `${padding}px`,\n    display: 'inline-block',\n  },\n};\n\ninterface IProps extends WithStylesProps<typeof styles> {\n  children: React.ReactNode\n}\n\nconst Paper: FC<IProps> = ({ classes, children }) =>\n  <div className={classes.paper}>\n    <div className={classes.content}>\n      {children}\n    </div>\n  </div>;\n\nexport default withStyles(styles)(Paper);\n","import React, { FC, useCallback } from 'react';\nimport withStyles, { WithStylesProps } from 'react-jss'\n\nconst styles = {\n  container: {\n    display: 'flex',\n    marginTop: 5,\n    justifyContent: 'space-evenly',\n    width: '100%',\n  },\n  text: {\n    padding: 6,\n    font: \"900 25px/1 'Source Sans Pro', Arial, sans-serif\",\n    ['textTransform' as any]: 'uppercase',\n    color: '#fff',\n    backgroundColor: '#fb8f6e',\n  },\n  menu: {\n    backgroundColor: 'rgb(251, 143, 110)',\n    zoom: 1,\n    fill: 'white',\n    height: 37,\n    width: 37,\n    '&:hover': {\n      backgroundColor: 'rgb(253, 174, 150)',\n    }\n  },\n};\n\ninterface IProps extends WithStylesProps<typeof styles> {\n  score: number,\n  stepsLeft: number,\n  pause: Function,\n}\n\nconst MenuBar: FC<IProps> = ({ classes, score, stepsLeft, pause }) => {\n  const _pause = useCallback(() => pause(), [pause]);\n  return (\n    <div className={classes.container} onClick={_pause}>\n      <svg xmlns=\"http://www.w3.org/2000/svg\" className={classes.menu} height=\"24\" viewBox=\"0 0 24 24\" width=\"24\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z\"/></svg>\n      <p className={classes.text}>Score: {score >= 0 ? score : 0}</p>\n      <p className={classes.text}>Steps left: {stepsLeft}</p>\n    </div>\n  );\n};\n\nexport default withStyles(styles)(MenuBar);\n","import React, { FC } from 'react';\nimport withStyles, { WithStylesProps } from 'react-jss'\n\nconst styles = {\n  container: {\n    margin: 5,\n    bottom: 0,\n    ['position' as any]: 'fixed',\n  },\n  link: {\n    textShadow: '1px 1px 1px #656363',\n    textDecoration: 'inherit',\n    color: 'white',\n  },\n};\n\nconst Copyright: FC<WithStylesProps<typeof styles>> = ({ classes }) =>\n  <div className={classes.container}>\n    <a className={classes.link}\n      href=\"https://github.com/specialistvlad/snake-mini-game-web\"\n      rel=\"noopener noreferrer\"\n      target=\"_blank\">Project on GitHub</a>\n  </div>;\n\nexport default withStyles(styles)(Copyright);\n","import React, { FC, useCallback, memo } from 'react';\nimport withStyles, { WithStylesProps } from 'react-jss'\n\nconst styles = {\n  container: {\n    marginTop: 10,\n    marginBottom: 10,\n  },\n  input: {\n    \n  },\n  label: {\n    \n  },\n};\n\ninterface IProps extends WithStylesProps<typeof styles> {\n  children: React.ReactNode,\n  checked: boolean,\n  onChange: Function,\n}\n\nconst CheckBox: FC<IProps> = ({ classes, children, checked, onChange }) => \n  <div className={classes.container}>\n      <input\n        className={classes.input}\n        type=\"checkbox\"\n        name=\"autoPlay\"\n        value={checked ? 'true' : ''}\n        defaultChecked={checked}\n        onClick={useCallback((event) => onChange(!Boolean(event.target.value)), [onChange])}\n        ></input>\n      <label className={classes.label} htmlFor=\"autoPlay\">{children}</label>\n    </div>;\n\nexport default memo(withStyles(styles)(CheckBox));\n","import React, { FC, useState, useEffect, useCallback } from 'react';\nimport withStyles, { WithStylesProps } from 'react-jss'\nimport useEventListener from '@use-it/event-listener';\nimport { useSwipeable } from 'react-swipeable'\nimport { isMobile } from 'react-device-detect';\n\nimport { GameState, TCellTypes } from '../core/types';\nimport { game, agent } from '../core/instance';\n\nimport Table from './Table';\nimport Popup from './Popup';\nimport Paper from './Paper';\nimport MenuBar from './MenuBar';\nimport Copyright from './Copyright';\nimport CheckBox from './CheckBox';\n\n// let count = 0;\nconst size = 75;\n\nconst styles = {\n  container: {\n    height: '100%',\n    '@media (orientation: landscape)': {\n      width: size+'vh',\n    },\n    '@media (orientation: portrait)': {\n      width: size+'vw',\n    },\n    '@media only screen and (max-device-width: 720px)': {\n      width: '100vw',\n    },\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    margin: 'auto',\n    ['flexDirection' as any]: 'column',\n  },\n};\n\nconst Game: FC<WithStylesProps<typeof styles>> = ({ classes }) => {\n  const [state, setState] = useState<GameState>(GameState.ready);\n  const [cells, setCells] = useState<TCellTypes>(game.cells);\n  const [score, setScore] = useState<number>(game.score);\n  const [stepsLeft, setStepsLeft] = useState<number>(game.stepsLeft);\n  const [autoPlay, setAutoPlay] = useState<boolean>(true);\n\n  const callback = useCallback(event => {\n    switch (event?.dir || event?.code) {\n      case 'Right':\n      case 'ArrowRight':\n      case 'KeyD':\n        game.direction = 0;\n        break;\n  \n      case 'Down':\n      case 'ArrowDown':\n      case 'KeyS':\n        game.direction = 90;\n        break;\n  \n      case 'Left':\n      case 'ArrowLeft':\n      case 'KeyA':\n        game.direction = 180;\n        break;\n  \n      case 'Up':\n      case 'ArrowUp':\n      case 'KeyW':\n        game.direction = 270;\n        break;\n\n      case 'Space':\n      case 'Escape':\n      case 'Enter':\n      case 'Menu':\n      case 'StartGame':\n        if (game.gameOver) {\n          game.reset();\n        }\n        if (state === GameState.running) {\n          setState(GameState.pause);\n        } else {\n          setState(GameState.running);\n        }\n        break;\n          \n      case 'KeyR':\n      case 'ResetGame':\n        game.reset();\n        setState(GameState.running);\n        break;\n    }\n  }, [state]);\n\n  useEffect(() => {\n    if (!autoPlay) {\n      return;\n    }\n\n    agent.loadModel();\n  }, [autoPlay]);\n\n  // reactions on button press\n  useEventListener('keydown', callback);\n\n  // reactions on swipes\n  const handlers = useSwipeable({\n    onSwiped: callback,\n    preventDefaultTouchmoveEvent: true,\n    trackMouse: true\n  });\n\n  // main function aka loop\n  useEffect(() => {\n    const tmp = setInterval(() => {\n      if (state === GameState.running) {\n        if (autoPlay) {\n          if (agent.ready) {\n            game.direction = agent.predict(game.state);\n            setCells(game.tick());\n          }\n        } else {\n          setCells(game.tick());\n        }\n      }\n\n      if (game.gameOver) {\n        setState(GameState.gameOver);\n      }\n\n      setScore(game.score);\n      setStepsLeft(game.stepsLeft);\n    }, isMobile ? 350 : 150);\n\n    return () => clearTimeout(tmp);\n  }, [state, cells, autoPlay]);\n\n  const start = useCallback(() => callback({ code: 'StartGame' }), [callback]);\n  const reset = useCallback(() => callback({ code: 'ResetGame' }), [callback]);\n  const pause = useCallback(() => callback({ code: 'Menu' }), [callback]);\n  const autoPlayCallback = useCallback((value) => setAutoPlay(value), []);\n\n  return (\n    <div className={classes.container} {...handlers}>\n      <MenuBar score={score} stepsLeft={stepsLeft} pause={pause}/>\n      <CheckBox checked={autoPlay} onChange={autoPlayCallback} >Allow deep learned network to play automatically</CheckBox>\n      <Paper>\n        <Table cells={cells} />\n      </Paper>\n      {state === GameState.running\n        ? null\n        : <Popup\n        state={state}\n        score={score}\n        start={start}\n        reset={reset}\n        />\n      }\n      <Copyright/>\n    </div>\n  );\n};\n\nexport default withStyles(styles)(Game);\n","import './index.css';\n\nimport React from 'react';\n\nimport { render } from 'react-dom';\nimport Game from './components/Game';\n\nrender(<Game />, document.getElementById('root'));\n"],"sourceRoot":""}