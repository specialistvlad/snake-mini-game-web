{"version":3,"sources":["core/types.tsx","core/classes/GameObject.ts","core/classes/LosingLengthSnake.ts","core/classes/Snake.ts","core/classes/Food.ts","core/classes/Game.ts","core/classes/Agent.ts","core/instance.ts","components/Cell.tsx","components/Table.tsx","components/AlignCenter.tsx","components/RainbowButton.tsx","components/Popup.tsx","components/Paper.tsx","components/MenuBar.tsx","components/Copyright.tsx","components/CheckBox.tsx","components/Game.tsx","index.tsx"],"names":["GameState","CellType","Direction","RelativeDirection","GameObject","defaultState","cells","localState","this","currentState","Error","forward","dryRun","reduceForward","reduceBackward","max","Math","floor","random","index","trunc","Date","now","y","x","filter","coordinate","type","LosingLengthSnake","stepsLeftToDecreaseLength","stepsForEachFood","gameCells","collision","collisionOthers","tastyFood","looseLength","usualStepForward","snake","length","getNextCoord","slice","_died","nextCoord","nextCell","food","params","_name","currentDegree","nextDegree","steps","tableSize","name","direction","step","map","item","snakeHead","y1","x1","find","y0","x0","wall","isNextDirectionCorrect","abs","Left","Right","Down","Up","next","current","value","nextDirection","relativeDirectionToAbsolute","Food","lastDinnerTime","dinnerRefreshSeconds","secondsFromLastDinner","dinnerTime","randomCoordinate","findCellsByCoord","moreFoooood","getTime","secondsFromUnixEpoch","Game","size","fullSize","snakes","_state","_cellsForView","reset","makeCellsForView","center","gameObjects","Array","reduce","array","state","methodName","accumulator","reducer","fill","empty","makeEmptyCellsForView","cellTypeIndex","Object","keys","indexOf","toString","cellsSorted","sort","a","b","coordinateToIndex","l","indexToCoordinate","relativeDirection","angle","died","score","stepsLeft","Agent","modelUrl","sideSize","model","_agentReady","loadModel","warm","tf","inputTensor","gameStateToTensor","predict","argMax","dataSync","buffer","forEach","set","toTensor","game","agent","CellCssGrid","cellType","className","memo","whyDidYouRender","withStyles","container","width","height","border","borderRadius","display","gridColumnGap","gridRowGap","classes","style","gridTemplateColumns","sqrt","gridTemplateRows","Cell","key","wrapper","justifyContent","alignItems","margin","wrappedMobile","children","isMobile","classNames","styles","btn","minWidth","padding","fontWeight","fontSize","backgroundColor","borderImage","borderImageSlice","backgroundClip","cursor","green","greenButtonText","background","WebkitBackgroundClip","WebkitTextFillColor","orange","orangeButtonText","blue","blueButtonText","color","onClick","_onClick","useCallback","containerClasses","textClasses","top","left","article","marginTop","text","title","marginBottom","description","start","_start","_reset","AlignCenter","ready","pause","gameOver","paper","content","font","menu","zoom","_pause","xmlns","viewBox","d","bottom","link","textShadow","textDecoration","href","rel","target","input","label","checked","onChange","onChangeCallback","event","Boolean","htmlFor","useState","setState","setCells","setScore","setStepsLeft","autoPlay","setAutoPlay","callback","dir","code","running","useEffect","init","useEventListener","handlers","useSwipeable","onSwiped","preventDefaultTouchmoveEvent","trackMouse","tmp","setInterval","console","log","agentReady","tick","clearTimeout","autoPlayCallback","Table","render","document","getElementById"],"mappings":"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","file":"static/js/main.1aaa61e2.chunk.js","sourcesContent":["export enum GameState {\n    ready = 0,\n    running = 1,\n    pause = 2,\n    gameOver = 3,\n};\n\nexport enum CellType {\n    empty = 0,\n    wall,\n    food,\n    snake,\n    snakeHead,\n};\n\n// *******************************************\n// Coordinates and direction on the table\n// *******************************************\nexport type TCoordinate = [number, number]; // y, x\nexport type TCoordinates = Array<TCoordinate>;\n\nexport enum Direction {\n    Right = 0,\n    Down = 90,\n    Left = 180,\n    Up = 270,\n};\n\nexport enum RelativeDirection {\n    Straight = 0,\n    Left = 1,\n    Right = 2,\n};\n\nexport type TGameState = {\n    cells: TCells,\n};\n\nexport type TCell = {\n    coordinate: TCoordinate,\n    type: CellType,\n};\n\nexport type TCells = Array<TCell>;\nexport type TCellTypes = Array<CellType>;\n","import { TGameState, TCoordinate, TCells } from '../types';\n\nexport abstract class GameObject {\n  protected defaultState: TGameState = { cells: [] };\n  protected localState: TGameState = this.defaultState;\n\n  protected reduceForward(currentState: TGameState): TGameState {\n    throw new Error('Must be implemented!');\n  }\n\n  protected reduceBackward(currentState: TGameState): TGameState {\n    return currentState;\n  }\n\n  public reducer(\n    currentState: TGameState = this.defaultState,\n    forward: boolean = true, \n    dryRun: boolean = false,\n  ): TGameState {\n    if (!dryRun && forward) {\n      this.localState = this.reduceForward(currentState);\n    }\n\n    if (!dryRun && !forward) {\n      return this.reduceBackward(currentState);\n    }\n\n    return {\n      ...currentState,\n      ...this.localState,\n      cells: [\n        ...currentState.cells,\n        ...this.localState.cells,\n      ],\n    };\n  }\n\n  protected random(max: number) {\n    return Math.floor((Math.random() * max));\n  }\n\n  protected indexToCoordinate(index: number, max: number): TCoordinate {\n    return [Math.trunc(index / max), Math.trunc(index % max)];\n  }\n\n  protected secondsFromUnixEpoch() {\n    return Date.now() / 1000;\n  }\n\n  protected randomCoordinate(max: number): TCoordinate {\n    return [this.random(max), this.random(max)];\n  }\n\n  protected findCellsByCoord(cells: TCells, [y, x]: TCoordinate): TCells {\n    return cells.filter(({ coordinate, type }) => coordinate[0] === y && coordinate[1] === x);\n  }\n}","import { CellType, TCells } from '../types';\nimport { Snake } from './Snake';\n\nexport class LosingLengthSnake extends Snake {\n    protected stepsLeftToDecreaseLength: number = 10;\n    protected stepsForEachFood: number = 10;\n    \n    get stepsLeft(): number {\n        return ((this.snake.length - 1) * this.stepsForEachFood) + this.stepsLeftToDecreaseLength;\n    }\n\n    protected step(gameCells: TCells): void {\n        if (this.collision(gameCells)) { // collision with tail check\n            return;\n        }\n\n        if (this.collisionOthers(gameCells)) { // collision in another cells check\n            return;\n        }\n\n        if (this.tastyFood(gameCells)) { // find food\n            return;\n        }\n\n        if (this.looseLength(gameCells)) { // seems no steps left to move forward, decreasing length\n            return;\n        }\n\n        if (this.usualStepForward(gameCells)) {\n            return;\n        }\n    }\n\n    protected looseLength(gameCells: TCells): boolean {\n        this.stepsLeftToDecreaseLength--;\n        if (this.stepsLeftToDecreaseLength === 0) {\n            if (this.snake.length >= 2) {\n                this.stepsLeftToDecreaseLength = this.stepsForEachFood;\n                this.snake = [this.getNextCoord(), ...this.snake.slice(0, this.snake.length - 2)];\n                return true;\n            }\n            return this._died = true;\n        }\n        return false;\n    }\n\n    /**\n     * Detect food in next cell\n     * If food found we have to return next coord for snake's head plus current snake\n     * \n     * Extended logic is: add extra steps on new cell with food\n     * \n     * @returns Return true if we need to stop step managing\n     */\n    protected tastyFood(gameCells: TCells): boolean {\n        const nextCoord = this.getNextCoord();\n        const nextCell = this.nextCell(gameCells);\n\n        if (nextCell?.type === CellType.food) {\n            this.stepsLeftToDecreaseLength = this.stepsForEachFood;\n            this.snake = [nextCoord, ...this.snake];\n            return true;\n        }\n\n        return false;\n    }\n};","import { GameObject } from './GameObject';\nimport {\n    TGameState,\n    TCoordinate,\n    TCoordinates,\n    Direction,\n    CellType,\n    TCells,\n    TCell,\n    RelativeDirection,\n} from '../types';\n\nexport type TSnakeConstructorParams = {\n    snake: TCoordinates;\n    name?: string;\n    direction?: Direction;\n    tableSize?: number;\n};\n\nexport class Snake extends GameObject {\n    private _name: string;\n    protected _died: boolean = false;\n    protected snake: TCoordinates;\n    private currentDegree: Direction;\n    private nextDegree: Direction;\n    protected steps: number = -1;\n    private tableSize: number;\n\n    constructor(params: TSnakeConstructorParams) {\n        super();\n        this._name = params.name || 'Unknown snake';\n        this.snake = params.snake;\n        this.currentDegree = params.direction || 0;\n        this.nextDegree = this.currentDegree;\n        this.tableSize = params.tableSize || 100;\n    }\n\n    public set direction(nextDegree: Direction) {\n        this.nextDegree = nextDegree;\n    }\n\n    public set relativeDirection(nextDirection: RelativeDirection) {\n        this.nextDegree = this.relativeDirectionToAbsolute(nextDirection);\n    }\n\n    public get name(): string {\n        return this._name;\n    }\n\n    public get length(): number {\n        return this.snake.length;\n    }\n\n    get died(): boolean {\n        return this._died;\n    }\n\n    get score(): number {\n        return this.steps > 0 ? this.steps : 0;\n    }\n\n    protected reduceForward(currentState: TGameState, dryRun: boolean = false): TGameState {\n        if (!dryRun) {\n            if (!this._died) {\n                if (this.steps >= 0) {\n                    this.step(currentState.cells);\n                }\n                this.steps++;\n            }\n        }\n\n        return {\n            cells: this.snake.map((item, index) => ({\n                coordinate: item,\n                type: index === 0 ? CellType.snakeHead : CellType.snake,\n            })),\n        };\n    }\n\n    protected step(gameCells: TCells): void {\n        if (this.collision(gameCells)) { // check collision with tail\n            return;\n        }\n\n        if (this.collisionOthers(gameCells)) { // check collision in another cells\n            return;\n        }\n\n        if (this.tastyFood(gameCells)) { // find food\n            return;\n        }\n\n        if (this.usualStepForward(gameCells)) { // just move to next cell\n            return;\n        }\n    }\n\n    /**\n     * Return possible cell if it already exists in array based on your snake movement way\n     * \n     * In this cell can be: food, another snake or another type of cell\n     * In this cell can't be current snake tail\n     */\n    protected nextCell(gameCells: TCells): TCell | undefined {\n        const [y1, x1] = this.getNextCoord();\n        return gameCells.find(({ coordinate: [y0, x0] }) => y0 === y1 && x0 === x1);\n    }\n\n    /**\n     * Handle here collision with your tail\n     */\n    protected collision(gameCells: TCells): boolean {\n        const nextCoord = this.getNextCoord();\n\n        if (this.snake.find(([y, x]) => nextCoord[0] === y && nextCoord[1] === x)) {\n            return this._died = true;\n        }\n        return false;\n    }\n\n    /**\n     * Handle here usual step forward minus one tail block\n     */\n    protected usualStepForward(gameCells: TCells): boolean {\n        this.snake = [this.getNextCoord(), ...this.snake.slice(0, this.snake.length - 1)];\n        return true;\n    }\n\n    /**\n     * Detect food in next cell\n     * If food found we have to return next coord for snake's head plus current snake\n     * \n     * @returns Return true if we need to stop step managing\n     */\n    protected tastyFood(gameCells: TCells): boolean {\n        if (this.nextCell(gameCells)?.type === CellType.food) {\n            this.snake = [this.getNextCoord(), ...this.snake];\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Handle here collision with another objects in cells\n     */\n    protected collisionOthers(gameCells: TCells): boolean {\n        const nextCell = this.nextCell(gameCells);\n        \n        if (nextCell?.type === CellType.snake || nextCell?.type === CellType.snakeHead || nextCell?.type === CellType.wall) {\n            return this._died = true;\n        }\n        return false;\n    }\n\n    protected getNextCoord(): TCoordinate {\n        const [y, x] = this.snake.slice(0)[0];\n        const isNextDirectionCorrect = Math.abs(this.currentDegree - this.nextDegree) !== 180;\n        if (isNextDirectionCorrect) {\n            this.currentDegree = this.nextDegree;\n        }\n    \n        switch (isNextDirectionCorrect ? this.nextDegree : this.currentDegree) {\n            case Direction.Left:\n                return [y, x === 0 ? this.tableSize - 1 : x - 1];\n            case Direction.Right:\n                return [y, x + 1 === this.tableSize ? 0 : x + 1];\n            case Direction.Down:\n                return [y + 1 === this.tableSize ? 0 : y + 1, x];\n            case Direction.Up:\n                return [y === 0 ? this.tableSize - 1 : y - 1, x];\n        };\n        throw new Error(`I have no idea how to move this degree o_O: ${this.nextDegree}`)\n    }\n\n    relativeDirectionToAbsolute(next: RelativeDirection, current = this.currentDegree): Direction {\n        const value = [0, -90, +90][next];\n        if (current + value < 0) {\n            return 360 + value;\n        } else if (current + value >= 360) {\n            return 90 - value;\n        }\n\n        return this.nextDegree = current + value;\n    }\n};","import { TGameState, CellType } from '../types';\nimport { GameObject } from './GameObject';\n\nexport class Food extends GameObject {\n  private lastDinnerTime: number;\n  public tableSize: number;\n  private dinnerRefreshSeconds: number = 7;\n\n  constructor(tableSize: number, lastDinnerTime: number = 0) {\n    super();\n    this.tableSize = tableSize;\n    this.lastDinnerTime = lastDinnerTime;\n  }\n\n  protected reduceForward(currentState: TGameState): TGameState {\n    if (this.secondsFromLastDinner() > this.dinnerRefreshSeconds) {\n      this.dinnerTime();\n      return this.localState = {\n        cells: [{\n          coordinate: this.randomCoordinate(this.tableSize),\n          type: CellType.food,\n        }],\n      };\n    }\n  \n    return this.localState;\n  }\n\n  protected reduceBackward(currentState: TGameState): TGameState {\n    if (this.findCellsByCoord(currentState.cells, this.localState.cells[0].coordinate).length === 2) {\n        this.moreFoooood()\n    }\n    return currentState;\n  }\n\n  protected dinnerTime() {\n    this.lastDinnerTime = new Date().getTime() / 1000;\n  }\n\n  protected secondsFromLastDinner() {\n    return this.secondsFromUnixEpoch() - this.lastDinnerTime;\n  }\n\n  get dinnerEachSeconds(): number {\n    return this.dinnerRefreshSeconds;\n  }\n\n  protected moreFoooood() {\n    this.lastDinnerTime = 0;\n  }\n}","import { LosingLengthSnake } from './LosingLengthSnake';\nimport { Food } from './Food';\nimport { GameObject } from './GameObject';\nimport { TCellTypes, TCell, TGameState, Direction, RelativeDirection, CellType, TCoordinate } from '../types';\n\ninterface IGame {\n    reset(): void;\n    tick(): TCellTypes;\n    cells: TCellTypes;\n    state: TGameState;\n    score: number;\n    direction: number;\n    gameOver: boolean;\n};\n\nexport class Game implements IGame {\n    private defaultState = { cells: [] };\n    public size: number;\n    public fullSize: number;\n    private snakes: Array<LosingLengthSnake> = [];\n    private food: Array<Food> = [];\n    private _state: TGameState = this.defaultState;\n    private _cellsForView: TCellTypes = [];\n\n    constructor(size: number = 10) {\n        this.size = size;\n        this.fullSize = size * size;\n        this.reset();\n        this._cellsForView = this.makeCellsForView();\n    }\n\n    public reset(): void {\n        const center = [Math.trunc(this.size / 2), Math.trunc(this.size / 2)];\n        this.snakes = [new LosingLengthSnake({\n            name: 'My smart snake',\n            snake: [\n                [center[0], center[1]+1],\n                [center[0], center[1]],\n                [center[0], center[1]-1],\n            ],\n            tableSize: this.size,\n        })];\n\n        this.food = [\n            new Food(this.size),\n        ];\n    }\n\n    public tick(): TCellTypes {\n        const gameObjects = Array<GameObject>(...this.food, ...this.snakes);\n        this._state = this.reduce(gameObjects, this.reduce(gameObjects, this.defaultState), false);\n        this._cellsForView = this.makeCellsForView();\n        return this._cellsForView;\n    }\n\n    public reduce(array: Array<GameObject>, state: TGameState, forward: boolean = true): TGameState {\n        const methodName = forward ? 'reduce' : 'reduceRight';\n        return array[methodName]((accumulator: TGameState, item: GameObject) => item.reducer(accumulator, forward), state);\n    }\n\n    protected makeEmptyCellsForView(): TCellTypes {\n        return this._cellsForView = Array<CellType>(this.fullSize).fill(CellType.empty);\n    }\n\n    protected indexToCoordinate(index: number, max: number): TCoordinate {\n        return [Math.trunc(index / max), Math.trunc(index % max)];\n    }\n\n    protected coordinateToIndex([y, x]: TCoordinate): number {\n        return y * this.size + x;\n    }\n\n    protected makeCellsForView(): TCellTypes {\n        if (this._cellsForView.length === 0) {\n            return this._cellsForView = this.makeEmptyCellsForView();\n        }\n\n        const cellTypeIndex = (value: CellType) => Object.keys(CellType).indexOf(value.toString());\n\n        const cellsSorted = this._state.cells.sort((a: TCell, b: TCell) => {\n            if (this.coordinateToIndex(a.coordinate) < this.coordinateToIndex(b.coordinate)) {\n                return 1;\n            }\n\n            if (this.coordinateToIndex(a.coordinate) > this.coordinateToIndex(b.coordinate)) {\n                return -1;\n            }\n\n            if (this.coordinateToIndex(a.coordinate) === this.coordinateToIndex(b.coordinate)) {\n                if (cellTypeIndex(a.type) < cellTypeIndex(b.type)) {\n                    return 1;\n                }\n\n                if (cellTypeIndex(a.type) > cellTypeIndex(b.type)) {\n                    return -1;\n                }\n                return 0;\n            }\n\n            throw new Error('Imposible');\n        });\n\n        return this._cellsForView = this.makeEmptyCellsForView().map((l, index) => {\n            const [y1, x1] = this.indexToCoordinate(index, this.size);\n            return cellsSorted.find(({ coordinate: [y, x] }: TCell) => x === x1 && y === y1)?.type || CellType.empty;\n        });\n    }\n\n    public get cells(): TCellTypes {\n        return this._cellsForView;\n    }\n\n    public set relativeDirection(direction: RelativeDirection) {\n        this.snakes[0].relativeDirection = direction;\n    }\n\n    public set direction(angle: Direction) {\n        this.snakes[0].direction = angle;\n    }\n\n    public get gameOver(): boolean {\n        return this.snakes.length === 0 || this.snakes.filter(({ died }) => died).length === this.snakes.length;\n    }\n\n    public get score(): number {\n        return this.snakes[0].score;\n    }\n\n    public get stepsLeft(): number {\n        return this.snakes[0].stepsLeft;\n    }\n\n    public get state(): TGameState {\n        return this._state;\n    }\n};","import * as tf from '@tensorflow/tfjs';\nimport { RelativeDirection, TGameState, CellType } from '../types';\n\ninterface IAgent {\n    predict (state: TGameState): RelativeDirection;\n    gameStateToTensor(state: TGameState): tf.Tensor;\n};\n\nexport class Agent implements IAgent {\n    public modelUrl: string = './model/model.json';\n    public sideSize: number;\n    private model: any | undefined;\n    private _agentReady: boolean = false;\n\n    constructor(size: number) {\n        this.sideSize = size;\n    }\n\n    async init(): Promise<undefined> {\n        await this.loadModel();\n        this._agentReady = true;\n        await this.warm();\n        return;\n    }\n\n    public get agentReady(): boolean {\n        return this._agentReady;\n    }\n\n    public predict(state: TGameState): RelativeDirection {\n        if (!this._agentReady) {\n            throw new Error('Agent is not ready to predict yet');\n        }\n\n        return tf.tidy(() => {\n            const inputTensor = this.gameStateToTensor(state);\n            const outTensor = this.model.predict(inputTensor);\n            // console.log('Predicted!', outTensor.toString());\n            return outTensor;\n        }).argMax(-1).dataSync();\n    };\n\n    private async loadModel(): Promise<undefined> {\n        this.model = await tf.loadLayersModel(this.modelUrl);\n        return;\n    }\n\n    private async warm(): Promise<undefined> {\n        for (let index = 0; index < 2; index++) {\n            this.predict({ cells: [] });\n        }\n        return;\n    }\n\n    gameStateToTensor(state: TGameState): tf.Tensor {\n        const n = 0;\n        const statesCount = 1;\n        const buffer = tf.buffer([statesCount, this.sideSize, this.sideSize, 2]);\n        state.cells.forEach(({ coordinate, type }) => buffer.set(\n            type === CellType.snake || type === CellType.snakeHead ? type - 2 : type - 1,\n            n,\n            coordinate[0],\n            coordinate[1],\n            type === CellType.snake || type === CellType.snakeHead ? 0 : 1,\n        ));\n        return buffer.toTensor();\n    }\n};\n","import { Game } from './classes/Game';\nimport { Agent } from './classes/Agent';\n\nconst size = 9;\n\nexport const game = new Game(size);\nexport const agent = new Agent(size);","import React, { FC, memo } from 'react';\n\nimport { CellType } from '../core/types';\n\ninterface IProps {\n  cellType: CellType,\n}\n\nconst CellCssGrid: FC<IProps> = ({ cellType }) => <div className={`cell-type-${cellType.toString()}`}></div>;\n\nexport default memo(CellCssGrid);\n\n// @ts-ignore\nCellCssGrid.whyDidYouRender = true\n","import React, { FC, memo } from 'react';\nimport withStyles, { WithStylesProps } from 'react-jss'\n\nimport { TCellTypes, CellType } from '../core/types';\nimport CellCssGrid from './Cell';\n\nconst styles = {\n  container: {\n    width: '100%',\n    height: '100%',\n    border: '2px dashed #F7EEEE',\n    borderRadius: 5,\n    display: 'grid',\n    gridColumnGap: 0,\n    gridRowGap: 0,\n  }\n};\n\ninterface IProps extends WithStylesProps<typeof styles> {\n  cells: TCellTypes,\n}\n\nconst TableCssGrid: FC<IProps> = ({ classes, cells }) => {\n  const result = (\n    <div\n      className={`table-css-grid-container ${classes.container}`}\n      style={{\n        gridTemplateColumns: `repeat(${Math.sqrt(cells.length)}, 1fr)`,\n        gridTemplateRows: `repeat(${Math.sqrt(cells.length)}, 1fr)`,\n      }}\n    >\n      {cells.map((cellType: CellType, index: number) => (<CellCssGrid key={index} cellType={cellType} />))}\n    </div>\n  );\n  return result;\n}\n\nexport default memo(withStyles(styles)(TableCssGrid));\n\n// @ts-ignore\n// TableCssGrid.whyDidYouRender = true;\n","import React, { FC } from 'react';\nimport withStyles, { WithStylesProps } from 'react-jss'\nimport classNames from \"classnames\";\n\nconst styles = {\n  wrapper: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100vw',\n    height: '100vh',\n    margin: 'auto',\n  },\n  wrappedMobile: {\n    display: 'inherit',\n  },\n  container: {\n    margin: '0 auto',\n  },\n};\n\ninterface IProps extends WithStylesProps<typeof styles> {\n  children: React.ReactNode,\n  isMobile?: boolean,\n}\n\nconst FlexAlignCenter: FC<IProps> = ({ classes, children, isMobile }) =>\n  <div className={classNames(\n    classes.wrapper, \n    {[classes.wrappedMobile]: isMobile}, \n  )}>\n    <div className={classes.container}>{children}</div>\n  </div>;\n\nexport default withStyles(styles)(FlexAlignCenter);\n","import React, { FC, useCallback } from 'react';\nimport withStyles, { WithStylesProps } from 'react-jss'\n\nexport type TRainbowButtonColor = 'green' | 'orange' | 'blue';\nexport type TRainbowButtonTextColor = 'greenButtonText' | 'orangeButtonText' | 'blueButtonText';\n\nconst styles = {\n  btn: {\n    display: 'inline-block',\n    minWidth: 270,\n    margin: '0.4em',\n    padding: '0.7em 3em',\n    fontWeight: 400,\n    fontSize: 30,\n    backgroundColor: 'transparent',\n    border: '4px solid transparent',\n    borderImage: 'linear-gradient(to right, #add356 0%, #00dfa6 100%)',\n    borderImageSlice: 1,\n    backgroundClip: 'border-box',\n    cursor: 'pointer',\n    ['textAlign' as any]: 'center',\n  },\n  green: {\n    borderImageSlice: 1,\n    borderImage: 'linear-gradient(to right, #add356 0%, #00dfa6 100%)',\n  },\n  greenButtonText: {\n    background: '-webkit-linear-gradient(left, #add356, #00dfa6)',\n    WebkitBackgroundClip: 'text',\n    WebkitTextFillColor: 'transparent',\n    },\n  orange: {\n    borderImageSlice: 1,\n    borderImage: 'linear-gradient(to right, #ffcb52 0%, #ff451f 100%)',\n  },\n  orangeButtonText: {\n    background: '-webkit-linear-gradient(left, #ffcb52, #ff451f)',\n    WebkitBackgroundClip: 'text',\n    WebkitTextFillColor: 'transparent',\n  },\n  blue: {\n    borderImageSlice: 1,\n    borderImage: 'linear-gradient(to right, #3dade9 0%, #bf2fcb 100%)',\n  },\n  blueButtonText: {\n    background: '-webkit-linear-gradient(left, #3dade9, #bf2fcb)',\n    WebkitBackgroundClip: 'text',\n    WebkitTextFillColor: 'transparent',\n  },\n};\n\ninterface IProps extends WithStylesProps<typeof styles> {\n  color: TRainbowButtonColor,\n  onClick: Function,\n}\n\nconst RainbowButton: FC<IProps> = ({ children, classes, color, onClick }) => {\n  const _onClick = useCallback(() => onClick(), [onClick]);\n  const containerClasses = `${classes.btn} ${classes[color]}`;\n  const textClasses = classes[`${color}ButtonText` as TRainbowButtonTextColor];\n\n  return <button className={containerClasses} onClick={_onClick}><p className={textClasses}>{children}</p></button>;\n}\nexport default withStyles(styles)(RainbowButton);\n","import React, { FC, useCallback } from 'react';\nimport withStyles, { WithStylesProps } from 'react-jss'\n\nimport { GameState } from '../core/types';\nimport AlignCenter from './AlignCenter';\nimport RainbowButton from './RainbowButton';\n\nconst styles = {\n  container: {\n    height: '100%',\n    top: 0,\n    left: 0,\n    fontSize: 'xx-large',\n    backgroundColor: 'rgba(0, 0, 0, 0.6)',\n    width: '100%',\n    cursor: 'default',\n    ['textAlign' as any]: 'center',\n    ['position' as any]: 'fixed',\n  },\n  article: {\n    marginTop: '1em',\n  },\n  text: {\n    top: '47%',\n    color: 'white',\n    ['position' as any]: 'relative',\n    ['textAlign' as any]: 'center',\n  },\n  title: {\n    fontSize: 70,\n    marginBottom: '0.2em',\n  },\n  score: {\n    fontSize: 40,\n  },\n  description: {\n    marginTop: '1.5em',\n    fontSize: 25,\n  },\n};\n\ninterface IProps extends WithStylesProps<typeof styles> {\n  score: number,\n  state: GameState,\n  start: Function,\n  reset: Function,\n}\n\nconst Popup: FC<IProps> = ({ classes, score, state, start, reset }) => {\n  const _start = useCallback(() => start(), [start]);\n  const _reset = useCallback(() => reset(), [reset]);\n\n  return (\n    <div className={classes.container}>\n      <AlignCenter>\n        <div className={`${classes.text} ${classes.title}`}>\n          { state === GameState.ready ? 'Hi there!' : null}\n          { state === GameState.pause ? 'Pause' : null}\n          { state === GameState.gameOver ? 'You lose' : null}\n        </div>\n        { state === GameState.pause || state === GameState.gameOver\n          ? (<div className={`${classes.text} ${classes.score}`}>Score: {score}</div>)\n          : null\n        }\n\n          <article className={classes.article}>\n            { state === GameState.ready || state === GameState.pause\n              ? (\n                <RainbowButton onClick={_start} color=\"green\">\n                  {state === GameState.ready ? 'Start' : 'Continue'}\n                </RainbowButton>\n              )\n              : null\n            }\n\n            { state === GameState.gameOver || state === GameState.pause\n              ? (\n                <RainbowButton onClick={_reset} color={state === GameState.pause ? 'blue' : 'orange'}>\n                  {state === GameState.pause ? 'New Game' : 'Try again'}\n                </RainbowButton>\n              )\n              : null}\n          </article>\n\n        <div className={`${classes.text} ${classes.description}`}>\n          { state === GameState.ready ? ' Press the button or \"space\" to start' : null}\n          { state === GameState.pause ? ' Press \"space\" to continue or \"R\" to restart' : null}\n          { state === GameState.gameOver ? ' Press the button or \"space\" to restart' : null}\n        </div>\n      </AlignCenter>\n    </div>\n  );\n}\n\nexport default withStyles(styles)(Popup);\n","import React, { FC } from 'react';\nimport withStyles, { WithStylesProps } from 'react-jss'\n\nconst padding = 30;\nconst size = 75;\n\nconst getColor = () => {\n  const colors = [\n    '#fd9170',\n    '#ef857c',\n    '#e8e277',\n    '#9ee0a1',\n    '#90d8af',\n    '#9ED9EB',\n    '#9EB3EB',\n    '#C49EEB',\n    '#DB9EEB',\n  ];\n  return colors[0];\n  // return colors[Math.floor((Math.random() * colors.length))]\n};\n  \nconst styles = {\n  paper: {\n    '@media (orientation: landscape)': {\n      width: size+'vh',\n      height: size+'vh',\n    },\n    '@media (orientation: portrait)': {\n      width: size+'vw',\n      height: size+'vw',\n    },\n    '@media only screen and (max-device-width: 720px)': {\n      width: '100vw',\n      height: '100vw',\n    },\n    backgroundColor: getColor(),\n    borderRadius: 12,\n    ['position' as any]: 'relative',\n    ['boxShadow' as any]: '0 1px 4px rgba(0, 0, 0, 0.3), 0 0 20px rgba(0, 0, 0, 0.1) inset',\n    '&::before': {\n      ['position' as any]: 'absolute',\n      content: 'open-quote',\n      top: 100,\n      bottom: 5,\n      left: 30,\n      right: 30,\n      zIndex: -1,\n      boxShadow: '0 0 40px 13px #848484;',\n      borderRadius: '100px/20px',\n    },\n    '&::after': {\n      ['position' as any]: 'absolute',\n      content: 'open-quote',\n      top: 100,\n      bottom: 5,\n      left: 30,\n      right: 30,\n      zIndex: -1,\n      boxShadow: '0 0 40px 13px #848484;',\n      borderRadius: '100px/20px',\n    }\n  },\n  content: {\n    height: `calc(100% - 4px - ${padding}px - ${padding}px)`,\n    width: `calc(100% - 4px - ${padding}px - ${padding}px)`,\n    margin: `${padding}px`,\n    display: 'inline-block',\n  },\n};\n\ninterface IProps extends WithStylesProps<typeof styles> {\n  children: React.ReactNode\n}\n\nconst Paper: FC<IProps> = ({ classes, children }) =>\n  <div className={classes.paper}>\n    <div className={classes.content}>\n      {children}\n    </div>\n  </div>;\n\nexport default withStyles(styles)(Paper);\n","import React, { FC, useCallback } from 'react';\nimport withStyles, { WithStylesProps } from 'react-jss'\n\nconst styles = {\n  container: {\n    display: 'flex',\n    marginTop: 5,\n    justifyContent: 'space-evenly',\n    width: '100%',\n  },\n  text: {\n    padding: 6,\n    font: \"900 25px/1 'Source Sans Pro', Arial, sans-serif\",\n    ['textTransform' as any]: 'uppercase',\n    color: '#fff',\n    backgroundColor: '#fb8f6e',\n  },\n  menu: {\n    backgroundColor: 'rgb(251, 143, 110)',\n    zoom: 1,\n    fill: 'white',\n    height: 37,\n    width: 37,\n    '&:hover': {\n      backgroundColor: 'rgb(253, 174, 150)',\n    }\n  },\n};\n\ninterface IProps extends WithStylesProps<typeof styles> {\n  score: number,\n  stepsLeft: number,\n  pause: Function,\n}\n\nconst MenuBar: FC<IProps> = ({ classes, score, stepsLeft, pause }) => {\n  const _pause = useCallback(() => pause(), [pause]);\n  return (\n    <div className={classes.container} onClick={_pause}>\n      <svg xmlns=\"http://www.w3.org/2000/svg\" className={classes.menu} height=\"24\" viewBox=\"0 0 24 24\" width=\"24\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z\"/></svg>\n      <p className={classes.text}>Score: {score >= 0 ? score : 0}</p>\n      <p className={classes.text}>Steps left: {stepsLeft}</p>\n    </div>\n  );\n};\n\nexport default withStyles(styles)(MenuBar);\n","import React, { FC } from 'react';\nimport withStyles, { WithStylesProps } from 'react-jss'\n\nconst styles = {\n  container: {\n    margin: 5,\n    bottom: 0,\n    ['position' as any]: 'fixed',\n  },\n  link: {\n    textShadow: '1px 1px 1px #656363',\n    textDecoration: 'inherit',\n    color: 'white',\n  },\n};\n\nconst Copyright: FC<WithStylesProps<typeof styles>> = ({ classes }) =>\n  <div className={classes.container}>\n    <a className={classes.link}\n      href=\"https://github.com/specialistvlad/snake-mini-game-web\"\n      rel=\"noopener noreferrer\"\n      target=\"_blank\">Project on GitHub</a>\n  </div>;\n\nexport default withStyles(styles)(Copyright);\n","import React, { FC, useCallback } from 'react';\nimport withStyles, { WithStylesProps } from 'react-jss'\n\nconst styles = {\n  container: {\n    marginTop: 10,\n    marginBottom: 10,\n  },\n  input: {\n    \n  },\n  label: {\n    \n  },\n};\n\ninterface IProps extends WithStylesProps<typeof styles> {\n  children: React.ReactNode,\n  checked: boolean,\n  onChange: Function,\n}\n\nconst CheckBox: FC<IProps> = ({ classes, children, checked, onChange }) => {\n  const onChangeCallback = useCallback((event) => onChange(!Boolean(event.target.value)), [onChange]);\n  return (\n    <div className={classes.container}>\n      <input\n        className={classes.input}\n        type=\"checkbox\"\n        name=\"autoPlay\"\n        value={checked ? 'true' : ''}\n        onClick={onChangeCallback}\n        ></input>\n      <label className={classes.label} htmlFor=\"autoPlay\">{children}</label>\n    </div>\n  );\n};\n\nexport default withStyles(styles)(CheckBox);\n","import React, { FC, useState, useEffect, useCallback } from 'react';\nimport withStyles, { WithStylesProps } from 'react-jss'\nimport useEventListener from '@use-it/event-listener';\nimport { useSwipeable } from 'react-swipeable'\nimport { isMobile } from 'react-device-detect';\n\nimport { GameState, TCellTypes } from '../core/types';\nimport { game, agent } from '../core/instance';\n\nimport Table from './Table';\nimport Popup from './Popup';\nimport Paper from './Paper';\nimport MenuBar from './MenuBar';\nimport Copyright from './Copyright';\nimport CheckBox from './CheckBox';\n\nlet count = 0;\nconst size = 75;\n\nconst styles = {\n  container: {\n    height: '100%',\n    '@media (orientation: landscape)': {\n      width: size+'vh',\n    },\n    '@media (orientation: portrait)': {\n      width: size+'vw',\n    },\n    '@media only screen and (max-device-width: 720px)': {\n      width: '100vw',\n    },\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    margin: 'auto',\n    ['flexDirection' as any]: 'column',\n  },\n};\n\nconst Game: FC<WithStylesProps<typeof styles>> = ({ classes }) => {\n  const [state, setState] = useState<GameState>(GameState.ready);\n  const [cells, setCells] = useState<TCellTypes>(game.cells);\n  const [score, setScore] = useState<number>(game.score);\n  const [stepsLeft, setStepsLeft] = useState<number>(game.stepsLeft);\n  const [autoPlay, setAutoPlay] = useState<boolean>(false);\n\n  const callback = useCallback(event => {\n    switch (event?.dir || event?.code) {\n      case 'Right':\n      case 'ArrowRight':\n      case 'KeyD':\n        game.direction = 0;\n        break;\n  \n      case 'Down':\n      case 'ArrowDown':\n      case 'KeyS':\n        game.direction = 90;\n        break;\n  \n      case 'Left':\n      case 'ArrowLeft':\n      case 'KeyA':\n        game.direction = 180;\n        break;\n  \n      case 'Up':\n      case 'ArrowUp':\n      case 'KeyW':\n        game.direction = 270;\n        break;\n\n      case 'Space':\n      case 'Escape':\n      case 'Enter':\n      case 'Menu':\n      case 'StartGame':\n        if (game.gameOver) {\n          game.reset();\n        }\n        if (state === GameState.running) {\n          setState(GameState.pause);\n        } else {\n          setState(GameState.running);\n        }\n        break;\n          \n      case 'KeyR':\n      case 'ResetGame':\n        game.reset();\n        setState(GameState.running);\n        break;\n    }\n  }, [state]);\n\n  useEffect(() => {\n    if (!autoPlay) {\n      return;\n    }\n\n    agent.init();\n  }, [autoPlay]);\n\n  // reactions on button press\n  useEventListener('keydown', callback);\n\n  // reactions on swipes\n  const handlers = useSwipeable({\n    onSwiped: callback,\n    preventDefaultTouchmoveEvent: true,\n    trackMouse: true\n  });\n\n  // main function aka loop\n  useEffect(() => {\n    const tmp = setInterval(() => {\n      if (count > 1) {\n        // return;\n      }\n      count++;\n      if (state === GameState.running) {\n        console.log(typeof autoPlay, autoPlay);\n        \n        if (autoPlay) {\n          if (agent.agentReady) {\n            game.relativeDirection = agent.predict(game.state);\n            setCells(game.tick());\n          }\n        } else {\n          setCells(game.tick());\n        }\n      }\n\n      if (game.gameOver) {\n        setState(GameState.gameOver);\n      }\n\n      setScore(game.score);\n      setStepsLeft(game.stepsLeft);\n    }, isMobile ? 350 : 150);\n\n    return () => clearTimeout(tmp);\n  }, [state, cells, autoPlay]);\n\n  const start = useCallback(() => callback({ code: 'StartGame' }), [callback]);\n  const reset = useCallback(() => callback({ code: 'ResetGame' }), [callback]);\n  const pause = useCallback(() => callback({ code: 'Menu' }), [callback]);\n  const autoPlayCallback = useCallback((value) => setAutoPlay(value), []);\n\n  return (\n    <div className={classes.container} {...handlers}>\n      <MenuBar score={score} stepsLeft={stepsLeft} pause={pause}/>\n      <CheckBox checked={autoPlay} onChange={autoPlayCallback} >Allow deep learned network to play automatically</CheckBox>\n      <Paper>\n        <Table cells={cells} />\n      </Paper>\n      {state === GameState.running\n        ? null\n        : <Popup\n        state={state}\n        score={score}\n        start={start}\n        reset={reset}\n        />\n      }\n      <Copyright/>\n    </div>\n  );\n};\n\nexport default withStyles(styles)(Game);\n","import './index.css';\n\nimport React from 'react';\n\nimport { render } from 'react-dom';\nimport Game from './components/Game';\n\nif (process.env.NODE_ENV === 'development') {\n  const whyDidYouRender = require('@welldone-software/why-did-you-render');\n  whyDidYouRender(React);\n}\n\nrender(<Game />, document.getElementById('root'));\n"],"sourceRoot":""}