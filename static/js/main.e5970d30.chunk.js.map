{"version":3,"sources":["core/types.tsx","core/classes/GameObject.ts","core/classes/LosingLengthSnake.ts","core/classes/Snake.ts","core/classes/Food.ts","core/game.ts","core/classes/Game.ts","components/Table.tsx","components/AlignCenter.tsx","components/Button.tsx","components/Menu.tsx","components/Paper.tsx","components/Score.tsx","components/Game.tsx","index.tsx","components/Root.tsx"],"names":["GameState","CellType","Directions","CellPalette","GameObject","defaultState","cells","localState","this","currentState","Error","forward","dryRun","reduceForward","reduceBackward","max","Math","floor","random","index","trunc","Date","now","y","x","filter","coordinate","type","LosingLengthSnake","stepsLeftToDecreaseLength","stepsForEachFood","gameCells","collision","collisionOthers","tastyFood","looseLength","usualStepForward","snake","length","getNextCoord","slice","_died","nextCoord","nextCell","food","params","_name","color","currentDegree","nextDegree","steps","tableSize","name","direction","step","map","item","colorful","chroma","saturate","darken","hex","y1","x1","find","y0","x0","wall","isNextDirectionCorrect","abs","Left","Right","Down","Up","Food","lastDinnerTime","dinnerRefreshSeconds","secondsFromLastDinner","dinnerTime","randomCoordinate","findCellsByCoord","moreFoooood","getTime","secondsFromUnixEpoch","size","state","snakes","reset","center","gameObjects","Array","reduce","cellsToColorTable","array","methodName","accumulator","reducer","table","fill","forEach","angle","died","score","stepsLeft","styles","width","height","withStyles","classes","rows","className","row","indY","key","backgroundColor","indX","style","border","wrapper","display","justifyContent","alignItems","margin","container","children","btn","minWidth","padding","fontWeight","fontSize","borderImage","borderImageSlice","backgroundClip","cursor","green","greenButtonText","background","WebkitBackgroundClip","WebkitTextFillColor","orange","orangeButtonText","blue","blueButtonText","onClick","_onClick","useCallback","containerClasses","textClasses","top","left","article","marginTop","text","title","marginBottom","description","start","_start","_reset","AlignCenter","ready","pause","gameOver","paper","borderRadius","content","font","useState","setState","game","setRows","setScore","setStepsLeft","controlsCallback","event","dir","code","running","useEventListener","handlers","useSwipeable","onSwiped","preventDefaultTouchmoveEvent","trackMouse","useEffect","tmp","setInterval","tick","clearTimeout","render","document","getElementById"],"mappings":"2MAAYA,E,yDAAAA,O,iBAAAA,I,qBAAAA,I,iBAAAA,I,wBAAAA,M,KAOL,IAOKC,EAaAC,EApBCC,EAIH,oB,SAGEF,K,cAAAA,E,YAAAA,E,YAAAA,E,eAAAA,M,cAaAC,O,iBAAAA,I,gBAAAA,I,iBAAAA,I,cAAAA,M,yHCzBUE,EAAtB,iDACYC,aAA2B,CAAEC,MAAO,IADhD,KAEYC,WAAyBC,KAAKH,aAF1C,0DAI0BI,GACtB,MAAM,IAAIC,MAAM,0BALpB,qCAQ2BD,GACvB,OAAOA,IATX,gCAY8H,IAA7GA,EAA4G,uDAAjFD,KAAKH,aAAcM,IAA8D,yDAArCC,EAAqC,wDAKzH,OAJKA,GAAUD,IACbH,KAAKD,WAAaC,KAAKK,cAAcJ,IAGlCG,GAAWD,EAIT,eACFF,EADL,GAEKD,KAAKD,WAFV,CAGED,MAAM,GAAD,mBACAG,EAAaH,OADb,YAEAE,KAAKD,WAAWD,UARdE,KAAKM,eAAeL,KAlBjC,6BA+BmBM,GACf,OAAOC,KAAKC,MAAOD,KAAKE,SAAWH,KAhCvC,wCAmC8BI,EAAeJ,GACzC,MAAO,CAACC,KAAKI,MAAMD,EAAQJ,GAAMC,KAAKI,MAAMD,EAAQJ,MApCxD,6CAwCI,OAAOM,KAAKC,MAAQ,MAxCxB,uCA2C6BP,GACzB,MAAO,CAACP,KAAKU,OAAOH,GAAMP,KAAKU,OAAOH,MA5C1C,uCA+C6BT,EA/C7B,GA+C0E,IAAD,mBAA5BiB,EAA4B,KAAzBC,EAAyB,KACrE,OAAOlB,EAAMmB,QAAO,gBAAGC,EAAH,EAAGA,WAAH,EAAeC,KAAf,OAA0BD,EAAW,KAAOH,GAAKG,EAAW,KAAOF,SAhD3F,KCCaI,EAAb,2MACcC,0BAAoC,GADlD,EAEcC,iBAA2B,GAFzC,oEAQmBC,GACPvB,KAAKwB,UAAUD,IAIfvB,KAAKyB,gBAAgBF,IAIrBvB,KAAK0B,UAAUH,IAIfvB,KAAK2B,YAAYJ,IAIjBvB,KAAK4B,iBAAiBL,KAzBlC,kCA8B0BA,GAElB,OADAvB,KAAKqB,4BACkC,IAAnCrB,KAAKqB,4BACDrB,KAAK6B,MAAMC,QAAU,GACrB9B,KAAKqB,0BAA4BrB,KAAKsB,iBACtCtB,KAAK6B,MAAL,CAAc7B,KAAK+B,gBAAnB,mBAAsC/B,KAAK6B,MAAMG,MAAM,EAAGhC,KAAK6B,MAAMC,OAAS,MACvE,GAEJ9B,KAAKiC,OAAQ,KAtChC,gCAmDwBV,GAChB,IAAMW,EAAYlC,KAAK+B,eACjBI,EAAWnC,KAAKmC,SAASZ,GAE/B,OAAY,OAARY,QAAQ,IAARA,OAAA,EAAAA,EAAUhB,QAAS1B,EAAS2C,OAC5BpC,KAAKqB,0BAA4BrB,KAAKsB,iBACtCtB,KAAK6B,MAAL,CAAcK,GAAd,mBAA4BlC,KAAK6B,SAC1B,KA1DnB,gCAKQ,OAAS7B,KAAK6B,MAAMC,OAAS,GAAK9B,KAAKsB,iBAAoBtB,KAAKqB,8BALxE,GCkBA,YAUI,WAAYgB,GAAkC,IAAD,8BACzC,+CAVIC,WASqC,IARnCL,OAAiB,EAQkB,EAPrCM,WAOqC,IANnCV,WAMmC,IALrCW,mBAKqC,IAJrCC,gBAIqC,IAHnCC,OAAiB,EAGkB,EAFrCC,eAEqC,EAEzC,EAAKL,MAAQD,EAAOO,MAAQ,gBAC5B,EAAKL,MAAQF,EAAOE,OAAS,oBAC7B,EAAKV,MAAQQ,EAAOR,MACpB,EAAKW,cAAgBH,EAAOQ,WAAa,EACzC,EAAKJ,WAAa,EAAKD,cACvB,EAAKG,UAAYN,EAAOM,WAAa,IAPI,EAVjD,2EAwC4B1C,GAAgE,IAAD,OAArCG,EAAqC,wDAUnF,OATKA,GACIJ,KAAKiC,QACFjC,KAAK0C,OAAS,GACd1C,KAAK8C,KAAK7C,EAAaH,OAE3BE,KAAK0C,SAIN,CACH5C,MAAOE,KAAK6B,MAAMkB,KAAI,SAACC,EAAMrC,GAAP,MAAkB,CACpCO,WAAY8B,EACZ7B,KAAM1B,EAASoC,MACfU,MAAO,EAAKU,SAAStC,UAtDrC,+BA2DuBA,GACf,OAAiB,IAAVA,EACDX,KAAKuC,MACLW,IAAOlD,KAAKuC,OAAOY,SAASxC,GAAOyC,OAAyC,GAAjCzC,EAAQX,KAAK6B,MAAMC,OAAS,IAAQuB,QA9D7F,2BAiEmB9B,GACPvB,KAAKwB,UAAUD,IAIfvB,KAAKyB,gBAAgBF,IAIrBvB,KAAK0B,UAAUH,IAIfvB,KAAK4B,iBAAiBL,KA9ElC,+BAyFuBA,GAAuC,IAAD,EACpCvB,KAAK+B,eAD+B,mBAC9CuB,EAD8C,KAC1CC,EAD0C,KAErD,OAAOhC,EAAUiC,MAAK,gCAAGtC,WAAH,GAAgBuC,EAAhB,KAAoBC,EAApB,YAA8BD,IAAOH,GAAMI,IAAOH,OA3FhF,gCAiGwBhC,GAChB,IAAMW,EAAYlC,KAAK+B,eAEvB,QAAI/B,KAAK6B,MAAM2B,MAAK,mCAAEzC,EAAF,KAAKC,EAAL,YAAYkB,EAAU,KAAOnB,GAAKmB,EAAU,KAAOlB,OAC5DhB,KAAKiC,OAAQ,KArGhC,uCA6G+BV,GAEvB,OADAvB,KAAK6B,MAAL,CAAc7B,KAAK+B,gBAAnB,mBAAsC/B,KAAK6B,MAAMG,MAAM,EAAGhC,KAAK6B,MAAMC,OAAS,MACvE,IA/Gf,gCAwHwBP,GAA6B,IAAD,EAC5C,OAAI,UAAAvB,KAAKmC,SAASZ,UAAd,eAA0BJ,QAAS1B,EAAS2C,OAC5CpC,KAAK6B,MAAL,CAAc7B,KAAK+B,gBAAnB,mBAAsC/B,KAAK6B,SACpC,KA3HnB,sCAoI8BN,GACtB,IAAMY,EAAWnC,KAAKmC,SAASZ,GAE/B,QAAY,OAARY,QAAQ,IAARA,OAAA,EAAAA,EAAUhB,QAAS1B,EAASoC,QAAiB,OAARM,QAAQ,IAARA,OAAA,EAAAA,EAAUhB,QAAS1B,EAASkE,QAC1D3D,KAAKiC,OAAQ,KAxIhC,qCA6I2C,IAAD,cACnBjC,KAAK6B,MAAMG,MAAM,GAAG,GADD,GAC3BjB,EAD2B,KACxBC,EADwB,KAE5B4C,EAA4E,MAAnDpD,KAAKqD,IAAI7D,KAAKwC,cAAgBxC,KAAKyC,YAKlE,OAJImB,IACA5D,KAAKwC,cAAgBxC,KAAKyC,YAGtBmB,EAAyB5D,KAAKyC,WAAazC,KAAKwC,eACpD,KAAK9C,EAAWoE,KACZ,MAAO,CAAC/C,EAAS,IAANC,EAAUhB,KAAK2C,UAAY,EAAI3B,EAAI,GAClD,KAAKtB,EAAWqE,MACZ,MAAO,CAAChD,EAAGC,EAAI,IAAMhB,KAAK2C,UAAY,EAAI3B,EAAI,GAClD,KAAKtB,EAAWsE,KACZ,MAAO,CAACjD,EAAI,IAAMf,KAAK2C,UAAY,EAAI5B,EAAI,EAAGC,GAClD,KAAKtB,EAAWuE,GACZ,MAAO,CAAO,IAANlD,EAAUf,KAAK2C,UAAY,EAAI5B,EAAI,EAAGC,GAEtD,MAAM,IAAId,MAAJ,sDAAyDF,KAAKyC,eA9J5E,8BAoByBA,GACjBzC,KAAKyC,WAAaA,IArB1B,2BAyBQ,OAAOzC,KAAKsC,QAzBpB,6BA6BQ,OAAOtC,KAAK6B,MAAMC,SA7B1B,2BAiCQ,OAAO9B,KAAKiC,QAjCpB,4BAqCQ,OAAOjC,KAAK0C,MAAQ,EAAI1C,KAAK0C,MAAQ,MArC7C,GAA2B9C,IClBdsE,EAAb,YAKE,WAAYvB,GAAgD,IAAD,EAA5BwB,EAA4B,uDAAH,EAAG,4BACzD,+CALMA,oBAImD,IAHpDxB,eAGoD,IAFnDyB,qBAA+B,EAIrC,EAAKzB,UAAYA,EACjB,EAAKwB,eAAiBA,EAHmC,EAL7D,2EAW0BlE,GACtB,OAAID,KAAKqE,wBAA0BrE,KAAKoE,sBACtCpE,KAAKsE,aACEtE,KAAKD,WAAa,CACvBD,MAAO,CAAC,CACNoB,WAAYlB,KAAKuE,iBAAiBvE,KAAK2C,WACvCxB,KAAM1B,EAAS2C,KACfG,MAAO5C,MAKNK,KAAKD,aAvBhB,qCA0B2BE,GAIvB,OAH8F,IAA1FD,KAAKwE,iBAAiBvE,EAAaH,MAAOE,KAAKD,WAAWD,MAAM,GAAGoB,YAAYY,QAC/E9B,KAAKyE,cAEFxE,IA9BX,mCAkCID,KAAKmE,gBAAiB,IAAItD,MAAO6D,UAAY,MAlCjD,8CAsCI,OAAO1E,KAAK2E,uBAAyB3E,KAAKmE,iBAtC9C,oCA8CInE,KAAKmE,eAAiB,IA9C1B,wCA0CI,OAAOnE,KAAKoE,yBA1ChB,GAA0BxE,GCDX,MCYf,WAOI,aAAgC,IAApBgF,EAAmB,uDAAJ,GAAI,yBANvB/E,aAAe,CAAEC,MAAO,IAMD,KALvB8E,UAKuB,OAJvBC,MAAoB7E,KAAKH,aAIF,KAHvBiF,OAAmC,GAGZ,KAFvB1C,KAAoB,GAGxBpC,KAAK4E,KAAOA,EACZ5E,KAAK+E,QATb,oDAaQ,IAAMC,EAAS,CAACxE,KAAKI,MAAMZ,KAAK4E,KAAO,GAAIpE,KAAKI,MAAMZ,KAAK4E,KAAO,IAClE5E,KAAK8E,OAAS,CAAC,IAAI1D,EAAkB,CACjCwB,KAAM,iBACNf,MAAO,CACH,CAACmD,EAAO,GAAIA,EAAO,GAAG,GACtB,CAACA,EAAO,GAAIA,EAAO,IACnB,CAACA,EAAO,GAAIA,EAAO,GAAG,IAE1BrC,UAAW3C,KAAK4E,QAGpB5E,KAAKoC,KAAO,CACR,IAAI8B,EAAKlE,KAAK4E,SAzB1B,6BA8BQ,IAAMK,EAAcC,MAAK,WAAL,cAAqBlF,KAAKoC,MAA1B,mBAAmCpC,KAAK8E,UAE5D,OADA9E,KAAK6E,MAAQ7E,KAAKmF,OAAOF,EAAajF,KAAKmF,OAAOF,EAAajF,KAAKH,eAAe,GAC5EG,KAAKoF,sBAhCpB,6BAmCkBC,EAA0BR,GAAyD,IAAtC1E,IAAqC,yDACtFmF,EAAanF,EAAU,SAAW,cACxC,OAAOkF,EAAMC,IAAY,SAACC,EAAyBvC,GAA1B,OAA+CA,EAAKwC,QAAQD,EAAapF,KAAU0E,KArCpH,0CAwCgD,IAAD,OACjCY,EAAQP,MAAqBlF,KAAK4E,MAAMc,KAAK,IAAI3C,KAAI,kBAAMmC,MAAc,EAAKN,MAAMc,KAAK,OAE/F,OADA1F,KAAK6E,MAAM/E,MAAM6F,SAAQ,gCAAGzE,WAAH,GAAgBF,EAAhB,KAAmBD,EAAnB,KAAuBwB,EAAvB,EAAuBA,MAAvB,OAAyCkD,EAAMzE,GAAGD,GAAKwB,KACzEkD,IA3Cf,4BA+CQ,OAAOzF,KAAKoF,sBA/CpB,8BAkDyBQ,GACjB5F,KAAK8E,OAAO,GAAGjC,UAAY+C,IAnDnC,+BAuDQ,OAA8B,IAAvB5F,KAAK8E,OAAOhD,QAAgB9B,KAAK8E,OAAO7D,QAAO,qBAAG4E,QAAiB/D,SAAW9B,KAAK8E,OAAOhD,SAvDzG,4BA2DQ,OAAO9B,KAAK8E,OAAO,GAAGgB,QA3D9B,gCA+DQ,OAAO9F,KAAK8E,OAAO,GAAGiB,cA/D9B,M,cCTMC,EAAS,CACbP,MAAM,aACJQ,MAAO,OACPC,OAAQ,QACP,iBAA0B,YA2BhBC,cAAWH,EAAXG,EAnBW,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,KAAZ,OACxB,2BAAOC,UAAWF,EAAQX,OACxB,+BACCY,EAAKtD,KAAI,SAACwD,EAAqBC,GAAtB,OACR,wBAAIC,IAAG,iBAAYD,IAChBD,EAAIxD,KAAI,SAAC2D,EAAyBC,GAA1B,OACR,wBACCF,IAAG,kBAAaE,GAChBL,UAAU,OACVM,MAAO,CACLF,kBACAG,OAAQ,sCCFLV,cAvBA,CACbW,QAAS,CACPC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZhB,MAAO,QACPC,OAAQ,QACRgB,OAAQ,QAEVC,UAAW,CACTD,OAAQ,WAaGf,EALqB,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASgB,EAAZ,EAAYA,SAAZ,OAClC,yBAAKd,UAAWF,EAAQU,SACtB,yBAAKR,UAAWF,EAAQe,WAAYC,OCjBlCpB,EAAS,CACbqB,IAAI,aACFN,QAAS,eACTO,SAAU,IACVJ,OAAQ,QACRK,QAAS,YACTC,WAAY,IACZC,SAAU,GACVf,gBAAiB,cACjBG,OAAQ,wBACRa,YAAa,sDACbC,iBAAkB,EAClBC,eAAgB,aAChBC,OAAQ,WACP,YAAqB,UAExBC,MAAO,CACLH,iBAAkB,EAClBD,YAAa,uDAEfK,gBAAiB,CACfC,WAAY,kDACZC,qBAAsB,OACtBC,oBAAqB,eAEvBC,OAAQ,CACNR,iBAAkB,EAClBD,YAAa,uDAEfU,iBAAkB,CAChBJ,WAAY,kDACZC,qBAAsB,OACtBC,oBAAqB,eAEvBG,KAAM,CACJV,iBAAkB,EAClBD,YAAa,uDAEfY,eAAgB,CACdN,WAAY,kDACZC,qBAAsB,OACtBC,oBAAqB,gBAgBV/B,cAAWH,EAAXG,EAPmB,SAAC,GAA2C,IAAzCiB,EAAwC,EAAxCA,SAAUhB,EAA8B,EAA9BA,QAAS7D,EAAqB,EAArBA,MAAOgG,EAAc,EAAdA,QACvDC,EAAWC,uBAAY,kBAAMF,MAAW,CAACA,IACzCG,EAAgB,UAAMtC,EAAQiB,IAAd,YAAqBjB,EAAQ7D,IAC7CoG,EAAcvC,EAAQ,GAAD,OAAI7D,EAAJ,eAE3B,OAAO,4BAAQ+D,UAAWoC,EAAkBH,QAASC,GAAU,uBAAGlC,UAAWqC,GAAcvB,OCtDvFpB,EAAS,CACbmB,WAAS,GACPjB,OAAQ,OACR0C,IAAK,EACLC,KAAM,EACNpB,SAAU,WACVf,gBAAiB,qBACjBT,MAAO,OACP4B,OAAQ,WAPD,cAQN,YAAqB,UARf,cASN,WAAoB,SATd,GAWTiB,QAAS,CACPC,UAAW,OAEbC,MAAI,GACFJ,IAAK,MACLrG,MAAO,SAFL,cAGD,WAAoB,YAHnB,cAID,YAAqB,UAJpB,GAMJ0G,MAAO,CACLxB,SAAU,GACVyB,aAAc,SAEhBpD,MAAO,CACL2B,SAAU,IAEZ0B,YAAa,CACXJ,UAAW,QACXtB,SAAU,KAyDCtB,cAAWH,EAAXG,EA9CU,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,QAASN,EAAiC,EAAjCA,MAAOjB,EAA0B,EAA1BA,MAAOuE,EAAmB,EAAnBA,MAAOrE,EAAY,EAAZA,MAClDsE,EAASZ,uBAAY,kBAAMW,MAAS,CAACA,IACrCE,EAASb,uBAAY,kBAAM1D,MAAS,CAACA,IAE3C,OACE,yBAAKuB,UAAWF,EAAQe,WACtB,kBAACoC,EAAD,KACE,yBAAKjD,UAAS,UAAKF,EAAQ4C,KAAb,YAAqB5C,EAAQ6C,QACvCpE,IAAUrF,EAAUgK,MAAQ,YAAc,KAC1C3E,IAAUrF,EAAUiK,MAAQ,QAAU,KACtC5E,IAAUrF,EAAUkK,SAAW,WAAc,MAE/C7E,IAAUrF,EAAUiK,OAAS5E,IAAUrF,EAAUkK,SAC9C,yBAAKpD,UAAS,UAAKF,EAAQ4C,KAAb,YAAqB5C,EAAQN,QAA3C,UAA4DA,GAC7D,KAGF,6BAASQ,UAAWF,EAAQ0C,SACxBjE,IAAUrF,EAAUgK,OAAS3E,IAAUrF,EAAUiK,MAE/C,kBAAC,EAAD,CAAelB,QAASc,EAAQ9G,MAAM,SACnCsC,IAAUrF,EAAUgK,MAAQ,QAAU,YAGzC,KAGF3E,IAAUrF,EAAUkK,UAAY7E,IAAUrF,EAAUiK,MAElD,kBAAC,EAAD,CAAelB,QAASe,EAAQ/G,MAAOsC,IAAUrF,EAAUiK,MAAQ,OAAS,UACzE5E,IAAUrF,EAAUiK,MAAQ,WAAa,aAG5C,MAGR,yBAAKnD,UAAS,UAAKF,EAAQ4C,KAAb,YAAqB5C,EAAQ+C,cACvCtE,IAAUrF,EAAUgK,MAAQ,wCAA0C,KACtE3E,IAAUrF,EAAUiK,MAAQ,+CAAiD,KAC7E5E,IAAUrF,EAAUkK,SAAW,0CAA4C,WCjEjF1D,EAAS,CACb2D,OAAK,GACH,kCAAmC,CACjC1D,MAAOrB,OACPsB,OAAQtB,QAEV,iCAAkC,CAChCqB,MAAOrB,OACPsB,OAAQtB,QAEV8B,gBAxBA,UAyBAkD,aAAc,IAVX,cAWF,WAAoB,YAXlB,cAYF,YAAqB,mEAZnB,cAaH,aAbG,mBAcA,WAAoB,YAdpB,wBAeQ,cAfR,oBAgBI,KAhBJ,uBAiBO,GAjBP,qBAkBK,IAlBL,sBAmBM,IAnBN,wBAoBQ,GApBR,0BAqBU,0BArBV,6BAsBa,cAtBb,kBAwBH,YAxBG,mBAyBA,WAAoB,YAzBpB,wBA0BQ,cA1BR,oBA2BI,KA3BJ,uBA4BO,GA5BP,qBA6BK,IA7BL,sBA8BM,IA9BN,wBA+BQ,GA/BR,0BAgCU,0BAhCV,6BAiCa,cAjCb,OAoCLC,QAAS,CACPhD,OAAQ,qBACR+C,aAAc,EACd1D,OAAO,qBAAD,OA1DM,GA0DN,gBA1DM,GA0DN,OACND,MAAM,qBAAD,OA3DO,GA2DP,gBA3DO,GA2DP,OACLiB,OA5DY,GA6DZH,QAAS,iBAeEZ,cAAWH,EAAXG,EAPW,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASgB,EAAZ,EAAYA,SAAZ,OACxB,yBAAKd,UAAWF,EAAQuD,OACtB,yBAAKrD,UAAWF,EAAQyD,SACrBzC,OCzEDpB,EAAS,CACbmB,UAAW,CACTJ,QAAS,OACTG,OAAQ,gBACRF,eAAgB,iBAElBgC,MAAI,GACFzB,QAAS,EACTuC,KAAM,mDAFJ,cAGD,gBAAyB,aAHxB,sBAIK,QAJL,gCAKe,WALf,IAoBS3D,cAAWH,EAAXG,EANW,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASN,EAAZ,EAAYA,MAAOC,EAAnB,EAAmBA,UAAnB,OACxB,yBAAKO,UAAWF,EAAQe,WACtB,uBAAGb,UAAWF,EAAQ4C,MAAtB,UAAoClD,GAAS,EAAIA,EAAQ,GACzD,uBAAGQ,UAAWF,EAAQ4C,MAAtB,eAAyCjD,OCd9B,aAAO,IAAD,EACOgE,mBAAoBvK,EAAUgK,OADrC,mBACZ3E,EADY,KACLmF,EADK,OAEKD,mBAASE,EAAKnK,OAFnB,mBAEZuG,EAFY,KAEN6D,EAFM,OAGOH,mBAAiBE,EAAKnE,OAH7B,mBAGZA,EAHY,KAGLqE,EAHK,OAIeJ,mBAAiBE,EAAKlE,WAJrC,mBAIZA,EAJY,KAIDqE,EAJC,KAMbC,EAAmB5B,uBAAY,SAAA6B,GACnC,QAAa,OAALA,QAAK,IAALA,OAAA,EAAAA,EAAOC,OAAP,OAAcD,QAAd,IAAcA,OAAd,EAAcA,EAAOE,OAC3B,IAAK,QACL,IAAK,aACL,IAAK,OACHP,EAAKpH,UAAY,EACjB,MAEF,IAAK,OACL,IAAK,YACL,IAAK,OACHoH,EAAKpH,UAAY,GACjB,MAEF,IAAK,OACL,IAAK,YACL,IAAK,OACHoH,EAAKpH,UAAY,IACjB,MAEF,IAAK,KACL,IAAK,UACL,IAAK,OACHoH,EAAKpH,UAAY,IACjB,MAEF,IAAK,QACL,IAAK,SACL,IAAK,QACL,IAAK,YACCoH,EAAKP,UACPO,EAAKlF,QAEHF,IAAUrF,EAAUiL,QACtBT,EAASxK,EAAUiK,OAEnBO,EAASxK,EAAUiL,SAErB,MAEF,IAAK,OACL,IAAK,YACHR,EAAKlF,QACLiF,EAASxK,EAAUiL,YAGtB,CAAC5F,IAGJ6F,YAAiB,UAAWL,GAG5B,IAAMM,EAAWC,YAAa,CAC5BC,SAAUR,EACVS,8BAA8B,EAC9BC,YAAY,IAIdC,qBAAU,WACR,IAAMC,EAAMC,aAAY,WAClBrG,IAAUrF,EAAUiL,SACtBP,EAAQD,EAAKkB,QAGXlB,EAAKP,UACPM,EAASxK,EAAUkK,UAGrBS,EAASF,EAAKnE,OACdsE,EAAaH,EAAKlE,aACjB,KAEH,OAAO,kBAAMqF,aAAaH,MACzB,CAACpG,IAEJ,IAAMuE,EAAQX,uBAAY,kBAAM4B,EAAiB,CAAEG,KAAM,gBAAgB,CAACH,IACpEtF,EAAQ0D,uBAAY,kBAAM4B,EAAiB,CAAEG,KAAM,gBAAgB,CAACH,IAE1E,OACE,uCAAKzD,MAAO,CAAEV,OAAQ,SAAcyE,GAClC,kBAACpB,EAAD,KACE,kBAAC,EAAD,CAAOzD,MAAOA,EAAOC,UAAWA,IAChC,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAOM,KAAMA,IACZxB,IAAUrF,EAAUiL,QACjB,KACA,kBAAC,EAAD,CACE5F,MAAOA,EACPiB,MAAOA,EACPsD,MAAOA,EACPrE,MAAOA,QCvGvBsG,iBAAO,mBCHa,kBAAM,kBAAC,EAAD,QDGnB,MAAUC,SAASC,eAAe,W","file":"static/js/main.e5970d30.chunk.js","sourcesContent":["export enum GameState {\n    ready = 0,\n    running = 1,\n    pause = 2,\n    gameOver = 3,\n};\n\nexport const CellPalette = {\n    empty: 'black',\n    wall: 'white',\n    mirror: 'gray',\n    food: 'rgb(10, 232, 10)',\n};\n\nexport enum CellType {\n    empty = 'empty',\n    wall = 'wall',\n    food = 'food',\n    snake = 'snake',\n};\nexport type TCellColor = string;\n\n// *******************************************\n// Coordinates and direction on the table\n// *******************************************\nexport type TCoordinate = [number, number]; // y, x\nexport type TCoordinates = Array<TCoordinate>;\nexport enum Directions {\n    Right = 0,\n    Down = 90,\n    Left = 180,\n    Up = 270,\n};\n\nexport type TDegree = number;\n\nexport type TGameState = {\n    cells: TCells,\n};\n\nexport type TCell = {\n    coordinate: TCoordinate,\n    type: CellType,\n    color: TCellColor,\n};\n\nexport type TCells = Array<TCell>;\nexport type TColorTableRow = Array<string>;\nexport type TColorTable = Array<TColorTableRow>;\n","import { TGameState, TCoordinate, TCells } from '../types';\n\nexport abstract class GameObject {\n  protected defaultState: TGameState = { cells: [] };\n  protected localState: TGameState = this.defaultState;\n\n  protected reduceForward(currentState: TGameState): TGameState {\n    throw new Error('Must be implemented!');\n  }\n\n  protected reduceBackward(currentState: TGameState): TGameState {\n    return currentState;\n  }\n\n  public reducer(currentState: TGameState = this.defaultState, forward: boolean = true, dryRun: boolean = false): TGameState {\n    if (!dryRun && forward) {\n      this.localState = this.reduceForward(currentState);\n    }\n\n    if (!dryRun && !forward) {\n      return this.reduceBackward(currentState);\n    }\n\n    return {\n      ...currentState,\n      ...this.localState,\n      cells: [\n        ...currentState.cells,\n        ...this.localState.cells,\n      ],\n    };\n  }\n\n  protected random(max: number) {\n    return Math.floor((Math.random() * max));\n  }\n\n  protected indexToCoordinate(index: number, max: number): TCoordinate {\n    return [Math.trunc(index / max), Math.trunc(index % max)];\n  }\n\n  protected secondsFromUnixEpoch() {\n    return Date.now() / 1000;\n  }\n\n  protected randomCoordinate(max: number): TCoordinate {\n    return [this.random(max), this.random(max)];\n  }\n\n  protected findCellsByCoord(cells: TCells, [y, x]: TCoordinate): TCells {\n    return cells.filter(({ coordinate, type }) => coordinate[0] === y && coordinate[1] === x);\n  }\n}","import { CellType, TCells } from '../types';\nimport { Snake } from './Snake';\n\nexport class LosingLengthSnake extends Snake {\n    protected stepsLeftToDecreaseLength: number = 10;\n    protected stepsForEachFood: number = 10;\n    \n    get stepsLeft(): number {\n        return ((this.snake.length - 1) * this.stepsForEachFood) + this.stepsLeftToDecreaseLength;\n    }\n\n    protected step(gameCells: TCells): void {\n        if (this.collision(gameCells)) { // collision with tail check\n            return;\n        }\n\n        if (this.collisionOthers(gameCells)) { // collision in another cells check\n            return;\n        }\n\n        if (this.tastyFood(gameCells)) { // find food\n            return;\n        }\n\n        if (this.looseLength(gameCells)) { // seems no steps left to move forward, decreasing length\n            return;\n        }\n\n        if (this.usualStepForward(gameCells)) {\n            return;\n        }\n    }\n\n    protected looseLength(gameCells: TCells): boolean {\n        this.stepsLeftToDecreaseLength--;\n        if (this.stepsLeftToDecreaseLength === 0) {\n            if (this.snake.length >= 2) {\n                this.stepsLeftToDecreaseLength = this.stepsForEachFood;\n                this.snake = [this.getNextCoord(), ...this.snake.slice(0, this.snake.length - 2)];\n                return true;\n            }\n            return this._died = true;\n        }\n        return false;\n    }\n\n    /**\n     * Detect food in next cell\n     * If food found we have to return next coord for snake's head plus current snake\n     * \n     * Extended logic is: add extra steps on new cell with food\n     * \n     * @returns Return true if we need to stop step managing\n     */\n    protected tastyFood(gameCells: TCells): boolean {\n        const nextCoord = this.getNextCoord();\n        const nextCell = this.nextCell(gameCells);\n\n        if (nextCell?.type === CellType.food) {\n            this.stepsLeftToDecreaseLength = this.stepsForEachFood;\n            this.snake = [nextCoord, ...this.snake];\n            return true;\n        }\n\n        return false;\n    }\n};","import chroma from 'chroma-js';\nimport { GameObject } from './GameObject';\nimport {\n    TGameState,\n    TDegree,\n    TCoordinate,\n    TCoordinates,\n    Directions,\n    CellType,\n    TCells,\n    TCell,\n} from '../types';\n\nexport type TSnakeConstructorParams = {\n    name: string;\n    snake: TCoordinates;\n    color?: string;\n    direction?: TDegree;\n    tableSize?: number;\n};\n\nexport class Snake extends GameObject {\n    private _name: string;\n    protected _died: boolean = false;\n    private color: string;\n    protected snake: TCoordinates;\n    private currentDegree: TDegree;\n    private nextDegree: TDegree;\n    protected steps: number = -1;\n    private tableSize: number;\n\n    constructor(params: TSnakeConstructorParams) {\n        super();\n        this._name = params.name || 'Unknown snake';\n        this.color = params.color || 'rgb(239, 27, 232)' || chroma.random().hex();\n        this.snake = params.snake;\n        this.currentDegree = params.direction || 0;\n        this.nextDegree = this.currentDegree;\n        this.tableSize = params.tableSize || 100;\n    }\n\n    public set direction(nextDegree: TDegree) {\n        this.nextDegree = nextDegree;\n    }\n\n    public get name(): string {\n        return this._name;\n    }\n\n    public get length(): number {\n        return this.snake.length;\n    }\n\n    get died(): boolean {\n        return this._died;\n    }\n\n    get score(): number {\n        return this.steps > 0 ? this.steps : 0;\n    }\n\n    protected reduceForward(currentState: TGameState, dryRun: boolean = false): TGameState {\n        if (!dryRun) {\n            if (!this._died) {\n                if (this.steps >= 0) {\n                    this.step(currentState.cells);\n                }\n                this.steps++;\n            }\n        }\n\n        return {\n            cells: this.snake.map((item, index) => ({\n                coordinate: item,\n                type: CellType.snake,\n                color: this.colorful(index),\n            })),\n        };\n    }\n\n    protected colorful(index: number): string {\n        return index === 0\n            ? this.color\n            : chroma(this.color).saturate(index).darken((index / this.snake.length - 1) * 2).hex();\n    }\n\n    protected step(gameCells: TCells): void {\n        if (this.collision(gameCells)) { // collision with tail check\n            return;\n        }\n\n        if (this.collisionOthers(gameCells)) { // collision in another cells check\n            return;\n        }\n\n        if (this.tastyFood(gameCells)) { // find food\n            return;\n        }\n\n        if (this.usualStepForward(gameCells)) { // just move to next cell\n            return;\n        }\n    }\n\n    /**\n     * Return possible cell if it already exists in array based on your snake movement way\n     * \n     * In this cell can be: food, another snake or another type of cell\n     * In this cell can't be current snake tail\n     */\n    protected nextCell(gameCells: TCells): TCell | undefined {\n        const [y1, x1] = this.getNextCoord();\n        return gameCells.find(({ coordinate: [y0, x0] }) => y0 === y1 && x0 === x1);\n    }\n\n    /**\n     * Handle here collision with your tail\n     */\n    protected collision(gameCells: TCells): boolean {\n        const nextCoord = this.getNextCoord();\n\n        if (this.snake.find(([y, x]) => nextCoord[0] === y && nextCoord[1] === x)) {\n            return this._died = true;\n        }\n        return false;\n    }\n\n    /**\n     * Handle here usual step forward minus one tail block\n     */\n    protected usualStepForward(gameCells: TCells): boolean {\n        this.snake = [this.getNextCoord(), ...this.snake.slice(0, this.snake.length - 1)];\n        return true;\n    }\n\n    /**\n     * Detect food in next cell\n     * If food found we have to return next coord for snake's head plus current snake\n     * \n     * @returns Return true if we need to stop step managing\n     */\n    protected tastyFood(gameCells: TCells): boolean {\n        if (this.nextCell(gameCells)?.type === CellType.food) {\n            this.snake = [this.getNextCoord(), ...this.snake];\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Handle here collision with another objects in cells\n     */\n    protected collisionOthers(gameCells: TCells): boolean {\n        const nextCell = this.nextCell(gameCells);\n        \n        if (nextCell?.type === CellType.snake || nextCell?.type === CellType.wall) {\n            return this._died = true;\n        }\n        return false;\n    }\n\n    protected getNextCoord(): TCoordinate {\n        const [y, x] = this.snake.slice(0)[0];\n        const isNextDirectionCorrect = Math.abs(this.currentDegree - this.nextDegree) !== 180;\n        if (isNextDirectionCorrect) {\n            this.currentDegree = this.nextDegree;\n        }\n    \n        switch (isNextDirectionCorrect ? this.nextDegree : this.currentDegree) {\n            case Directions.Left:\n                return [y, x === 0 ? this.tableSize - 1 : x - 1];\n            case Directions.Right:\n                return [y, x + 1 === this.tableSize ? 0 : x + 1];\n            case Directions.Down:\n                return [y + 1 === this.tableSize ? 0 : y + 1, x];\n            case Directions.Up:\n                return [y === 0 ? this.tableSize - 1 : y - 1, x];\n        };\n        throw new Error(`I have no idea how to move this degree o_O: ${this.nextDegree}`)\n    }\n};","import { TGameState, CellType, CellPalette } from '../types';\nimport { GameObject } from './GameObject';\n\nexport class Food extends GameObject {\n  private lastDinnerTime: number;\n  public tableSize: number;\n  private dinnerRefreshSeconds: number = 7;\n\n  constructor(tableSize: number, lastDinnerTime: number = 0) {\n    super();\n    this.tableSize = tableSize;\n    this.lastDinnerTime = lastDinnerTime;\n  }\n\n  protected reduceForward(currentState: TGameState): TGameState {\n    if (this.secondsFromLastDinner() > this.dinnerRefreshSeconds) {\n      this.dinnerTime();\n      return this.localState = {\n        cells: [{\n          coordinate: this.randomCoordinate(this.tableSize),\n          type: CellType.food,\n          color: CellPalette.food,\n        }],\n      };\n    }\n  \n    return this.localState;\n  }\n\n  protected reduceBackward(currentState: TGameState): TGameState {\n    if (this.findCellsByCoord(currentState.cells, this.localState.cells[0].coordinate).length === 2) {\n        this.moreFoooood()\n    }\n    return currentState;\n  }\n\n  protected dinnerTime() {\n    this.lastDinnerTime = new Date().getTime() / 1000;\n  }\n\n  protected secondsFromLastDinner() {\n    return this.secondsFromUnixEpoch() - this.lastDinnerTime;\n  }\n\n  get dinnerEachSeconds(): number {\n    return this.dinnerRefreshSeconds;\n  }\n\n  protected moreFoooood() {\n    this.lastDinnerTime = 0;\n  }\n}","import { Game } from './classes/Game';\n\nexport default new Game();","import { LosingLengthSnake } from './LosingLengthSnake';\nimport { Food } from './Food';\nimport { GameObject } from './GameObject';\nimport { TCell, TColorTable, TGameState, TDegree } from '../types';\n\ninterface IGame {\n    reset(): void;\n    tick(): TColorTable;\n    cells: TColorTable;\n    score: number;\n    direction: number;\n    gameOver: boolean;\n};\n\nexport class Game implements IGame {\n    private defaultState = { cells: [] };\n    private size: number;\n    private state: TGameState = this.defaultState;\n    private snakes: Array<LosingLengthSnake> = [];\n    private food: Array<Food> = [];\n\n    constructor(size: number = 10) {\n        this.size = size;\n        this.reset();\n    }\n\n    public reset(): void {\n        const center = [Math.trunc(this.size / 2), Math.trunc(this.size / 2)];\n        this.snakes = [new LosingLengthSnake({\n            name: 'My smart snake',\n            snake: [\n                [center[0], center[1]+1],\n                [center[0], center[1]],\n                [center[0], center[1]-1],\n            ],\n            tableSize: this.size,\n        })];\n\n        this.food = [\n            new Food(this.size),\n        ];\n    }\n\n    public tick(): TColorTable {\n        const gameObjects = Array<GameObject>(...this.food, ...this.snakes);\n        this.state = this.reduce(gameObjects, this.reduce(gameObjects, this.defaultState), false);\n        return this.cellsToColorTable();\n    }\n\n    public reduce(array: Array<GameObject>, state: TGameState, forward: boolean = true): TGameState {\n        const methodName = forward ? 'reduce' : 'reduceRight';\n        return array[methodName]((accumulator: TGameState, item: GameObject) => item.reducer(accumulator, forward), state);\n    }\n\n    protected cellsToColorTable(): TColorTable {\n        const table = Array<Array<string>>(this.size).fill([]).map(() => Array<string>(this.size).fill(''));\n        this.state.cells.forEach(({ coordinate: [x, y], color}: TCell) => table[x][y] = color);\n        return table;\n    }\n\n    public get cells(): TColorTable {\n        return this.cellsToColorTable();\n    }\n\n    public set direction(angle: TDegree) {\n        this.snakes[0].direction = angle;\n    }\n\n    public get gameOver(): boolean {\n        return this.snakes.length === 0 || this.snakes.filter(({ died }) => died).length === this.snakes.length;\n    }\n\n    public get score(): number {\n        return this.snakes[0].score;\n    }\n\n    public get stepsLeft(): number {\n        return this.snakes[0].stepsLeft;\n    }\n};","import React, { FC } from 'react';\nimport withStyles, { WithStylesProps } from 'react-jss'\n\nimport { TColorTable, TColorTableRow } from '../core/types';\n\nconst styles = {\n  table: {\n    width: '100%',\n    height: '100%',\n    ['borderCollapse' as any]: 'inherit',\n  },\n};\n\ninterface IProps extends WithStylesProps<typeof styles> {\n  rows: TColorTable,\n}\n\nconst Table: FC<IProps> = ({ classes, rows }) =>\n  <table className={classes.table}>\n    <tbody>\n    {rows.map((row: TColorTableRow, indY: number) => (\n      <tr key={`row-id-${indY}`}>\n        {row.map((backgroundColor: string, indX: number) =>\n        (<td\n          key={`cell-id-${indX}`}\n          className=\"cell\"\n          style={{\n            backgroundColor,\n            border: '1px dashed #ffffff21',\n          }}\n        ></td>))}\n      </tr>\n    ))}\n    </tbody>\n  </table>\n\nexport default withStyles(styles)(Table);\n","import React, { FC } from 'react';\nimport withStyles, { WithStylesProps } from 'react-jss'\n\nconst styles = {\n  wrapper: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100vw',\n    height: '100vh',\n    margin: 'auto',\n  },\n  container: {\n    margin: '0 auto',\n  },\n};\n\ninterface IProps extends WithStylesProps<typeof styles> {\n  children: React.ReactNode\n}\n\nconst FlexAlignCenter: FC<IProps> = ({ classes, children }) =>\n  <div className={classes.wrapper}>\n    <div className={classes.container}>{children}</div>\n  </div>;\n\nexport default withStyles(styles)(FlexAlignCenter);\n","import React, { FC, useCallback } from 'react';\nimport withStyles, { WithStylesProps } from 'react-jss'\n\nexport type TRainbowButtonColor = 'green' | 'orange' | 'blue';\nexport type TRainbowButtonTextColor = 'greenButtonText' | 'orangeButtonText' | 'blueButtonText';\n\nconst styles = {\n  btn: {\n    display: 'inline-block',\n    minWidth: 270,\n    margin: '0.4em',\n    padding: '0.7em 3em',\n    fontWeight: 400,\n    fontSize: 30,\n    backgroundColor: 'transparent',\n    border: '4px solid transparent',\n    borderImage: 'linear-gradient(to right, #add356 0%, #00dfa6 100%)',\n    borderImageSlice: 1,\n    backgroundClip: 'border-box',\n    cursor: 'pointer',\n    ['textAlign' as any]: 'center',\n  },\n  green: {\n    borderImageSlice: 1,\n    borderImage: 'linear-gradient(to right, #add356 0%, #00dfa6 100%)',\n  },\n  greenButtonText: {\n    background: '-webkit-linear-gradient(left, #add356, #00dfa6)',\n    WebkitBackgroundClip: 'text',\n    WebkitTextFillColor: 'transparent',\n    },\n  orange: {\n    borderImageSlice: 1,\n    borderImage: 'linear-gradient(to right, #ffcb52 0%, #ff451f 100%)',\n  },\n  orangeButtonText: {\n    background: '-webkit-linear-gradient(left, #ffcb52, #ff451f)',\n    WebkitBackgroundClip: 'text',\n    WebkitTextFillColor: 'transparent',\n  },\n  blue: {\n    borderImageSlice: 1,\n    borderImage: 'linear-gradient(to right, #3dade9 0%, #bf2fcb 100%)',\n  },\n  blueButtonText: {\n    background: '-webkit-linear-gradient(left, #3dade9, #bf2fcb)',\n    WebkitBackgroundClip: 'text',\n    WebkitTextFillColor: 'transparent',\n  },\n};\n\ninterface IProps extends WithStylesProps<typeof styles> {\n  color: TRainbowButtonColor,\n  onClick: Function,\n}\n\nconst RainbowButton: FC<IProps> = ({ children, classes, color, onClick }) => {\n  const _onClick = useCallback(() => onClick(), [onClick]);\n  const containerClasses = `${classes.btn} ${classes[color]}`;\n  const textClasses = classes[`${color}ButtonText` as TRainbowButtonTextColor];\n\n  return <button className={containerClasses} onClick={_onClick}><p className={textClasses}>{children}</p></button>;\n}\nexport default withStyles(styles)(RainbowButton);\n","import React, { FC, useCallback } from 'react';\nimport withStyles, { WithStylesProps } from 'react-jss'\n\nimport { GameState } from '../core/types';\nimport AlignCenter from './AlignCenter';\nimport RainbowButton from './Button';\n\nconst styles = {\n  container: {\n    height: '100%',\n    top: 0,\n    left: 0,\n    fontSize: 'xx-large',\n    backgroundColor: 'rgba(0, 0, 0, 0.6)',\n    width: '100%',\n    cursor: 'default',\n    ['textAlign' as any]: 'center',\n    ['position' as any]: 'fixed',\n  },\n  article: {\n    marginTop: '1em',\n  },\n  text: {\n    top: '47%',\n    color: 'white',\n    ['position' as any]: 'relative',\n    ['textAlign' as any]: 'center',\n  },\n  title: {\n    fontSize: 70,\n    marginBottom: '0.2em',\n  },\n  score: {\n    fontSize: 40,\n  },\n  description: {\n    marginTop: '1.5em',\n    fontSize: 25,\n  },\n};\n\ninterface IProps extends WithStylesProps<typeof styles> {\n  score: number,\n  state: GameState,\n  start: Function,\n  reset: Function,\n}\n\nconst Menu: FC<IProps> = ({ classes, score, state, start, reset }) => {\n  const _start = useCallback(() => start(), [start]);\n  const _reset = useCallback(() => reset(), [reset]);\n\n  return (\n    <div className={classes.container}>\n      <AlignCenter>\n        <div className={`${classes.text} ${classes.title}`}>\n          { state === GameState.ready ? 'Hi there!' : null}\n          { state === GameState.pause ? 'Pause' : null}\n          { state === GameState.gameOver ? 'You los\\'' : null}\n        </div>\n        { state === GameState.pause || state === GameState.gameOver\n          ? (<div className={`${classes.text} ${classes.score}`}>Score: {score}</div>)\n          : null\n        }\n\n          <article className={classes.article}>\n            { state === GameState.ready || state === GameState.pause\n              ? (\n                <RainbowButton onClick={_start} color=\"green\">\n                  {state === GameState.ready ? 'Start' : 'Continue'}\n                </RainbowButton>\n              )\n              : null\n            }\n\n            { state === GameState.gameOver || state === GameState.pause\n              ? (\n                <RainbowButton onClick={_reset} color={state === GameState.pause ? 'blue' : 'orange'}>\n                  {state === GameState.pause ? 'New Game' : 'Try again'}\n                </RainbowButton>\n              )\n              : null}\n          </article>\n\n        <div className={`${classes.text} ${classes.description}`}>\n          { state === GameState.ready ? ' Press the button or \"space\" to start' : null}\n          { state === GameState.pause ? ' Press \"space\" to continue or \"R\" to restart' : null}\n          { state === GameState.gameOver ? ' Press the button or \"space\" to restart' : null}\n        </div>\n      </AlignCenter>\n    </div>\n  );\n}\n\nexport default withStyles(styles)(Menu);\n","import React, { FC } from 'react';\nimport withStyles, { WithStylesProps } from 'react-jss'\n\nconst size = 75;\nconst padding = 30;\n\nconst getColor = () => {\n  const colors = [\n    '#fd9170',\n    '#ef857c',\n    '#e8e277',\n    '#9ee0a1',\n    '#90d8af',\n    '#9ED9EB',\n    '#9EB3EB',\n    '#C49EEB',\n    '#DB9EEB',\n  ];\n  return colors[0];\n  // return colors[Math.floor((Math.random() * colors.length))]\n};\n  \nconst styles = {\n  paper: {\n    '@media (orientation: landscape)': {\n      width: size+'vh',\n      height: size+'vh',\n    },\n    '@media (orientation: portrait)': {\n      width: size+'vw',\n      height: size+'vw',\n    },\n    backgroundColor: getColor(),\n    borderRadius: 12,\n    ['position' as any]: 'relative',\n    ['boxShadow' as any]: '0 1px 4px rgba(0, 0, 0, 0.3), 0 0 20px rgba(0, 0, 0, 0.1) inset',\n    '&::before': {\n      ['position' as any]: 'absolute',\n      content: 'open-quote',\n      top: 100,\n      bottom: 5,\n      left: 30,\n      right: 30,\n      zIndex: -1,\n      boxShadow: '0 0 40px 13px #848484;',\n      borderRadius: '100px/20px',\n    },\n    '&::after': {\n      ['position' as any]: 'absolute',\n      content: 'open-quote',\n      top: 100,\n      bottom: 5,\n      left: 30,\n      right: 30,\n      zIndex: -1,\n      boxShadow: '0 0 40px 13px #848484;',\n      borderRadius: '100px/20px',\n    }\n  },\n  content: {\n    border: '2px dashed #F7EEEE',\n    borderRadius: 5,\n    height: `calc(100% - 4px - ${padding}px - ${padding}px)`,\n    width: `calc(100% - 4px - ${padding}px - ${padding}px)`,\n    margin: padding,\n    display: 'inline-block',\n  },\n};\n\ninterface IProps extends WithStylesProps<typeof styles> {\n  children: React.ReactNode\n}\n\nconst Paper: FC<IProps> = ({ classes, children }) =>\n  <div className={classes.paper}>\n    <div className={classes.content}>\n      {children}\n    </div>\n  </div>;\n\nexport default withStyles(styles)(Paper);\n","import React, { FC } from 'react';\nimport withStyles, { WithStylesProps } from 'react-jss'\n\nconst styles = {\n  container: {\n    display: 'flex',\n    margin: '0px 30px 10px',\n    justifyContent: 'space-between',\n  },\n  text: {\n    padding: 6,\n    font: \"900 25px/1 'Source Sans Pro', Arial, sans-serif\",\n    ['textTransform' as any]: 'uppercase',\n    color: '#fff',\n    backgroundColor: '#fb8f6e',\n  },\n};\n\ninterface IProps extends WithStylesProps<typeof styles> {\n  score: number,\n  stepsLeft: number,\n}\n\nconst Score: FC<IProps> = ({ classes, score, stepsLeft }) =>\n  <div className={classes.container}>\n    <p className={classes.text}>Score: {score >= 0 ? score : 0}</p>\n    <p className={classes.text}>Steps left: {stepsLeft}</p>\n  </div>;\n\nexport default withStyles(styles)(Score);\n","import React, { useState, useEffect, useCallback } from 'react';\nimport useEventListener from '@use-it/event-listener';\nimport { useSwipeable } from 'react-swipeable'\n\nimport { GameState } from '../core/types';\nimport game from '../core/game';\nimport Table from './Table';\nimport Menu from './Menu';\nimport AlignCenter from './AlignCenter';\nimport Paper from './Paper';\nimport Score from './Score';\n\nexport default () => {\n  const [state, setState] = useState<GameState>(GameState.ready);\n  const [rows, setRows] = useState(game.cells);\n  const [score, setScore] = useState<number>(game.score);\n  const [stepsLeft, setStepsLeft] = useState<number>(game.stepsLeft);\n\n  const controlsCallback = useCallback(event => {\n    switch (event?.dir || event?.code) {\n      case 'Right':\n      case 'ArrowRight':\n      case 'KeyD':\n        game.direction = 0;\n        break;\n  \n      case 'Down':\n      case 'ArrowDown':\n      case 'KeyS':\n        game.direction = 90;\n        break;\n  \n      case 'Left':\n      case 'ArrowLeft':\n      case 'KeyA':\n        game.direction = 180;\n        break;\n  \n      case 'Up':\n      case 'ArrowUp':\n      case 'KeyW':\n        game.direction = 270;\n        break;\n\n      case 'Space':\n      case 'Escape':\n      case 'Enter':\n      case 'StartGame':\n        if (game.gameOver) {\n          game.reset();\n        }\n        if (state === GameState.running) {\n          setState(GameState.pause);\n        } else {\n          setState(GameState.running);\n        }\n        break;\n          \n      case 'KeyR':\n      case 'ResetGame':\n        game.reset();\n        setState(GameState.running);\n        break;\n    }\n  }, [state]);\n\n  // reactions on button press\n  useEventListener('keydown', controlsCallback);\n\n  // reactions on swipes\n  const handlers = useSwipeable({\n    onSwiped: controlsCallback,\n    preventDefaultTouchmoveEvent: true,\n    trackMouse: true\n  });\n\n  // syncronization signal for the game\n  useEffect(() => {\n    const tmp = setInterval(() => {\n      if (state === GameState.running) {\n        setRows(game.tick());\n      }\n\n      if (game.gameOver) {\n        setState(GameState.gameOver);\n      }\n\n      setScore(game.score);\n      setStepsLeft(game.stepsLeft);\n    }, 150);\n\n    return () => clearTimeout(tmp);\n  }, [state]);\n\n  const start = useCallback(() => controlsCallback({ code: 'StartGame' }), [controlsCallback]);\n  const reset = useCallback(() => controlsCallback({ code: 'ResetGame' }), [controlsCallback]);\n\n  return (\n    <div style={{ height: '100%' }} {...handlers}>\n      <AlignCenter>\n        <Score score={score} stepsLeft={stepsLeft}/>\n        <Paper>\n          <Table rows={rows} />\n          {state === GameState.running\n            ? null\n            : <Menu\n                state={state}\n                score={score}\n                start={start}\n                reset={reset}\n              />\n          }\n        </Paper>\n      </AlignCenter>\n    </div>\n  );\n};\n","import './index.css';\n\nimport React from 'react';\nimport { render } from 'react-dom';\nimport { Root } from './components/Root';\n\nrender(<Root />, document.getElementById('root'));\n","import React from 'react';\nimport Game from './Game';\n\nexport const Root = () => <Game/>;"],"sourceRoot":""}